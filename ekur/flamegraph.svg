<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="470" onload="init(evt)" viewBox="0 0 1200 470" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="470" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="453.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="453.00"> </text><svg id="frames" x="10" width="1180" total_samples="868476659942"><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (93,134,309 samples, 0.01%)</title><rect x="0.0247%" y="373" width="0.0107%" height="15" fill="rgb(227,0,7)" fg:x="214798965" fg:w="93134309"/><text x="0.2747%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (175,419,439 samples, 0.02%)</title><rect x="0.0160%" y="389" width="0.0202%" height="15" fill="rgb(217,0,24)" fg:x="139151354" fg:w="175419439"/><text x="0.2660%" y="399.50"></text></g><g><title>&lt;image_dds::bcn::Bc5S as image_dds::bcn::decode::BcnDecode&lt;[u8: 4]&gt;&gt;::decompress_block (197,085,961 samples, 0.02%)</title><rect x="0.0399%" y="389" width="0.0227%" height="15" fill="rgb(221,193,54)" fg:x="346731216" fg:w="197085961"/><text x="0.2899%" y="399.50"></text></g><g><title>image_dds::snorm_to_unorm (131,570,599 samples, 0.02%)</title><rect x="0.0475%" y="373" width="0.0151%" height="15" fill="rgb(248,212,6)" fg:x="412246578" fg:w="131570599"/><text x="0.2975%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (184,708,092 samples, 0.02%)</title><rect x="0.1128%" y="261" width="0.0213%" height="15" fill="rgb(208,68,35)" fg:x="979368602" fg:w="184708092"/><text x="0.3628%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (147,646,797 samples, 0.02%)</title><rect x="0.1170%" y="245" width="0.0170%" height="15" fill="rgb(232,128,0)" fg:x="1016429897" fg:w="147646797"/><text x="0.3670%" y="255.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (115,511,307 samples, 0.01%)</title><rect x="0.1207%" y="229" width="0.0133%" height="15" fill="rgb(207,160,47)" fg:x="1048565387" fg:w="115511307"/><text x="0.3707%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (115,511,307 samples, 0.01%)</title><rect x="0.1207%" y="213" width="0.0133%" height="15" fill="rgb(228,23,34)" fg:x="1048565387" fg:w="115511307"/><text x="0.3707%" y="223.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (115,511,307 samples, 0.01%)</title><rect x="0.1207%" y="197" width="0.0133%" height="15" fill="rgb(218,30,26)" fg:x="1048565387" fg:w="115511307"/><text x="0.3707%" y="207.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (567,721,042 samples, 0.07%)</title><rect x="0.0803%" y="341" width="0.0654%" height="15" fill="rgb(220,122,19)" fg:x="697403260" fg:w="567721042"/><text x="0.3303%" y="351.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (567,721,042 samples, 0.07%)</title><rect x="0.0803%" y="325" width="0.0654%" height="15" fill="rgb(250,228,42)" fg:x="697403260" fg:w="567721042"/><text x="0.3303%" y="335.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (564,745,759 samples, 0.07%)</title><rect x="0.0806%" y="309" width="0.0650%" height="15" fill="rgb(240,193,28)" fg:x="700378543" fg:w="564745759"/><text x="0.3306%" y="319.50"></text></g><g><title>serde_json::ser::format_escaped_str (564,745,759 samples, 0.07%)</title><rect x="0.0806%" y="293" width="0.0650%" height="15" fill="rgb(216,20,37)" fg:x="700378543" fg:w="564745759"/><text x="0.3306%" y="303.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (479,435,662 samples, 0.06%)</title><rect x="0.0905%" y="277" width="0.0552%" height="15" fill="rgb(206,188,39)" fg:x="785688640" fg:w="479435662"/><text x="0.3405%" y="287.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (663,892,814 samples, 0.08%)</title><rect x="0.0762%" y="357" width="0.0764%" height="15" fill="rgb(217,207,13)" fg:x="661692219" fg:w="663892814"/><text x="0.3262%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (405,446,129 samples, 0.05%)</title><rect x="0.1573%" y="293" width="0.0467%" height="15" fill="rgb(231,73,38)" fg:x="1366061108" fg:w="405446129"/><text x="0.4073%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (402,472,655 samples, 0.05%)</title><rect x="0.1576%" y="277" width="0.0463%" height="15" fill="rgb(225,20,46)" fg:x="1369034582" fg:w="402472655"/><text x="0.4076%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (402,472,655 samples, 0.05%)</title><rect x="0.1576%" y="261" width="0.0463%" height="15" fill="rgb(210,31,41)" fg:x="1369034582" fg:w="402472655"/><text x="0.4076%" y="271.50"></text></g><g><title>[libc.so.6] (402,472,655 samples, 0.05%)</title><rect x="0.1576%" y="245" width="0.0463%" height="15" fill="rgb(221,200,47)" fg:x="1369034582" fg:w="402472655"/><text x="0.4076%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for f32&gt;::serialize (416,350,767 samples, 0.05%)</title><rect x="0.1563%" y="341" width="0.0479%" height="15" fill="rgb(226,26,5)" fg:x="1357766864" fg:w="416350767"/><text x="0.4063%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_f32 (416,350,767 samples, 0.05%)</title><rect x="0.1563%" y="325" width="0.0479%" height="15" fill="rgb(249,33,26)" fg:x="1357766864" fg:w="416350767"/><text x="0.4063%" y="335.50"></text></g><g><title>serde_json::ser::Formatter::write_f32 (408,056,523 samples, 0.05%)</title><rect x="0.1573%" y="309" width="0.0470%" height="15" fill="rgb(235,183,28)" fg:x="1366061108" fg:w="408056523"/><text x="0.4073%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (199,677,692 samples, 0.02%)</title><rect x="0.2043%" y="293" width="0.0230%" height="15" fill="rgb(221,5,38)" fg:x="1774117631" fg:w="199677692"/><text x="0.4543%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (197,185,964 samples, 0.02%)</title><rect x="0.2046%" y="277" width="0.0227%" height="15" fill="rgb(247,18,42)" fg:x="1776609359" fg:w="197185964"/><text x="0.4546%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (197,185,964 samples, 0.02%)</title><rect x="0.2046%" y="261" width="0.0227%" height="15" fill="rgb(241,131,45)" fg:x="1776609359" fg:w="197185964"/><text x="0.4546%" y="271.50"></text></g><g><title>[libc.so.6] (197,185,964 samples, 0.02%)</title><rect x="0.2046%" y="245" width="0.0227%" height="15" fill="rgb(249,31,29)" fg:x="1776609359" fg:w="197185964"/><text x="0.4546%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for i32&gt;::serialize (224,741,966 samples, 0.03%)</title><rect x="0.2043%" y="341" width="0.0259%" height="15" fill="rgb(225,111,53)" fg:x="1774117631" fg:w="224741966"/><text x="0.4543%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_i32 (224,741,966 samples, 0.03%)</title><rect x="0.2043%" y="325" width="0.0259%" height="15" fill="rgb(238,160,17)" fg:x="1774117631" fg:w="224741966"/><text x="0.4543%" y="335.50"></text></g><g><title>serde_json::ser::Formatter::write_i32 (224,741,966 samples, 0.03%)</title><rect x="0.2043%" y="309" width="0.0259%" height="15" fill="rgb(214,148,48)" fg:x="1774117631" fg:w="224741966"/><text x="0.4543%" y="319.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (1,401,797,579 samples, 0.16%)</title><rect x="0.0711%" y="389" width="0.1614%" height="15" fill="rgb(232,36,49)" fg:x="617609357" fg:w="1401797579"/><text x="0.3211%" y="399.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (1,363,822,063 samples, 0.16%)</title><rect x="0.0755%" y="373" width="0.1570%" height="15" fill="rgb(209,103,24)" fg:x="655584873" fg:w="1363822063"/><text x="0.3255%" y="383.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (693,821,903 samples, 0.08%)</title><rect x="0.1526%" y="357" width="0.0799%" height="15" fill="rgb(229,88,8)" fg:x="1325585033" fg:w="693821903"/><text x="0.4026%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for f32&gt;::serialize (180,466,024 samples, 0.02%)</title><rect x="0.2374%" y="357" width="0.0208%" height="15" fill="rgb(213,181,19)" fg:x="2061632255" fg:w="180466024"/><text x="0.4874%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_f32 (180,466,024 samples, 0.02%)</title><rect x="0.2374%" y="341" width="0.0208%" height="15" fill="rgb(254,191,54)" fg:x="2061632255" fg:w="180466024"/><text x="0.4874%" y="351.50"></text></g><g><title>serde_json::ser::Formatter::write_f32 (168,154,232 samples, 0.02%)</title><rect x="0.2388%" y="325" width="0.0194%" height="15" fill="rgb(241,83,37)" fg:x="2073944047" fg:w="168154232"/><text x="0.4888%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (168,154,232 samples, 0.02%)</title><rect x="0.2388%" y="309" width="0.0194%" height="15" fill="rgb(233,36,39)" fg:x="2073944047" fg:w="168154232"/><text x="0.4888%" y="319.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (165,227,673 samples, 0.02%)</title><rect x="0.2391%" y="293" width="0.0190%" height="15" fill="rgb(226,3,54)" fg:x="2076870606" fg:w="165227673"/><text x="0.4891%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (165,227,673 samples, 0.02%)</title><rect x="0.2391%" y="277" width="0.0190%" height="15" fill="rgb(245,192,40)" fg:x="2076870606" fg:w="165227673"/><text x="0.4891%" y="287.50"></text></g><g><title>[libc.so.6] (161,472,605 samples, 0.02%)</title><rect x="0.2396%" y="261" width="0.0186%" height="15" fill="rgb(238,167,29)" fg:x="2080625674" fg:w="161472605"/><text x="0.4896%" y="271.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTuple&gt;::serialize_element (235,107,997 samples, 0.03%)</title><rect x="0.2325%" y="389" width="0.0271%" height="15" fill="rgb(232,182,51)" fg:x="2019406936" fg:w="235107997"/><text x="0.4825%" y="399.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (225,729,923 samples, 0.03%)</title><rect x="0.2336%" y="373" width="0.0260%" height="15" fill="rgb(231,60,39)" fg:x="2028785010" fg:w="225729923"/><text x="0.4836%" y="383.50"></text></g><g><title>[libc.so.6] (205,518,405 samples, 0.02%)</title><rect x="0.3278%" y="309" width="0.0237%" height="15" fill="rgb(208,69,12)" fg:x="2846756042" fg:w="205518405"/><text x="0.5778%" y="319.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact::_{{closure}} (231,355,869 samples, 0.03%)</title><rect x="0.3266%" y="357" width="0.0266%" height="15" fill="rgb(235,93,37)" fg:x="2836149484" fg:w="231355869"/><text x="0.5766%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (231,355,869 samples, 0.03%)</title><rect x="0.3266%" y="341" width="0.0266%" height="15" fill="rgb(213,116,39)" fg:x="2836149484" fg:w="231355869"/><text x="0.5766%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (231,355,869 samples, 0.03%)</title><rect x="0.3266%" y="325" width="0.0266%" height="15" fill="rgb(222,207,29)" fg:x="2836149484" fg:w="231355869"/><text x="0.5766%" y="335.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume_with (464,712,536 samples, 0.05%)</title><rect x="0.3152%" y="373" width="0.0535%" height="15" fill="rgb(206,96,30)" fg:x="2737427159" fg:w="464712536"/><text x="0.5652%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (131,592,509 samples, 0.02%)</title><rect x="0.3536%" y="357" width="0.0152%" height="15" fill="rgb(218,138,4)" fg:x="3070547186" fg:w="131592509"/><text x="0.6036%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (5,994,117,169 samples, 0.69%)</title><rect x="0.3810%" y="341" width="0.6902%" height="15" fill="rgb(250,191,14)" fg:x="3308921545" fg:w="5994117169"/><text x="0.6310%" y="351.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (5,994,117,169 samples, 0.69%)</title><rect x="0.3810%" y="325" width="0.6902%" height="15" fill="rgb(239,60,40)" fg:x="3308921545" fg:w="5994117169"/><text x="0.6310%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (5,917,942,443 samples, 0.68%)</title><rect x="0.3898%" y="309" width="0.6814%" height="15" fill="rgb(206,27,48)" fg:x="3385096271" fg:w="5917942443"/><text x="0.6398%" y="319.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_buf (5,842,011,280 samples, 0.67%)</title><rect x="0.3985%" y="293" width="0.6727%" height="15" fill="rgb(225,35,8)" fg:x="3461027434" fg:w="5842011280"/><text x="0.6485%" y="303.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read_buf (5,800,970,962 samples, 0.67%)</title><rect x="0.4032%" y="277" width="0.6679%" height="15" fill="rgb(250,213,24)" fg:x="3502067752" fg:w="5800970962"/><text x="0.6532%" y="287.50"></text></g><g><title>core::io::borrowed_buf::BorrowedCursor::append (5,793,555,296 samples, 0.67%)</title><rect x="0.4041%" y="261" width="0.6671%" height="15" fill="rgb(247,123,22)" fg:x="3509483418" fg:w="5793555296"/><text x="0.6541%" y="271.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::copy_from_slice (5,793,555,296 samples, 0.67%)</title><rect x="0.4041%" y="245" width="0.6671%" height="15" fill="rgb(231,138,38)" fg:x="3509483418" fg:w="5793555296"/><text x="0.6541%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (5,793,555,296 samples, 0.67%)</title><rect x="0.4041%" y="229" width="0.6671%" height="15" fill="rgb(231,145,46)" fg:x="3509483418" fg:w="5793555296"/><text x="0.6541%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5,793,555,296 samples, 0.67%)</title><rect x="0.4041%" y="213" width="0.6671%" height="15" fill="rgb(251,118,11)" fg:x="3509483418" fg:w="5793555296"/><text x="0.6541%" y="223.50"></text></g><g><title>[libc.so.6] (5,730,007,563 samples, 0.66%)</title><rect x="0.4114%" y="197" width="0.6598%" height="15" fill="rgb(217,147,25)" fg:x="3573031151" fg:w="5730007563"/><text x="0.6614%" y="207.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (7,148,730,995 samples, 0.82%)</title><rect x="0.2597%" y="389" width="0.8231%" height="15" fill="rgb(247,81,37)" fg:x="2255156853" fg:w="7148730995"/><text x="0.5097%" y="399.50"></text></g><g><title>std::io::default_read_exact (6,201,748,153 samples, 0.71%)</title><rect x="0.3687%" y="373" width="0.7141%" height="15" fill="rgb(209,12,38)" fg:x="3202139695" fg:w="6201748153"/><text x="0.6187%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (6,194,633,372 samples, 0.71%)</title><rect x="0.3695%" y="357" width="0.7133%" height="15" fill="rgb(227,1,9)" fg:x="3209254476" fg:w="6194633372"/><text x="0.6195%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (100,849,134 samples, 0.01%)</title><rect x="1.0712%" y="341" width="0.0116%" height="15" fill="rgb(248,47,43)" fg:x="9303038714" fg:w="100849134"/><text x="1.3212%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (87,667,460 samples, 0.01%)</title><rect x="1.0727%" y="325" width="0.0101%" height="15" fill="rgb(221,10,30)" fg:x="9316220388" fg:w="87667460"/><text x="1.3227%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (87,667,460 samples, 0.01%)</title><rect x="1.0727%" y="309" width="0.0101%" height="15" fill="rgb(210,229,1)" fg:x="9316220388" fg:w="87667460"/><text x="1.3227%" y="319.50"></text></g><g><title>&lt;image_dds::bcn::Bc1 as image_dds::bcn::decode::BcnDecode&lt;[u8: 4]&gt;&gt;::decompress_block (2,403,279,789 samples, 0.28%)</title><rect x="1.1073%" y="357" width="0.2767%" height="15" fill="rgb(222,148,37)" fg:x="9616437422" fg:w="2403279789"/><text x="1.3573%" y="367.50"></text></g><g><title>bcdec_rs::bc1 (218,760,876 samples, 0.03%)</title><rect x="1.3588%" y="341" width="0.0252%" height="15" fill="rgb(234,67,33)" fg:x="11800956335" fg:w="218760876"/><text x="1.6088%" y="351.50"></text></g><g><title>[libc.so.6] (386,901,969 samples, 0.04%)</title><rect x="1.3840%" y="229" width="0.0445%" height="15" fill="rgb(247,98,35)" fg:x="12019717211" fg:w="386901969"/><text x="1.6340%" y="239.50"></text></g><g><title>[libc.so.6] (4,692,152,771 samples, 0.54%)</title><rect x="1.4285%" y="197" width="0.5403%" height="15" fill="rgb(247,138,52)" fg:x="12406619180" fg:w="4692152771"/><text x="1.6785%" y="207.50"></text></g><g><title>alloc::vec::from_elem (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="357" width="0.5873%" height="15" fill="rgb(213,79,30)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="367.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="341" width="0.5873%" height="15" fill="rgb(246,177,23)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="325" width="0.5873%" height="15" fill="rgb(230,62,27)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="309" width="0.5873%" height="15" fill="rgb(216,154,8)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="293" width="0.5873%" height="15" fill="rgb(244,35,45)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="277" width="0.5873%" height="15" fill="rgb(251,115,12)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="261" width="0.5873%" height="15" fill="rgb(240,54,50)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (5,100,841,008 samples, 0.59%)</title><rect x="1.3840%" y="245" width="0.5873%" height="15" fill="rgb(233,84,52)" fg:x="12019717211" fg:w="5100841008"/><text x="1.6340%" y="255.50"></text></g><g><title>__rdl_alloc_zeroed (4,713,939,039 samples, 0.54%)</title><rect x="1.4285%" y="229" width="0.5428%" height="15" fill="rgb(207,117,47)" fg:x="12406619180" fg:w="4713939039"/><text x="1.6785%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (4,713,939,039 samples, 0.54%)</title><rect x="1.4285%" y="213" width="0.5428%" height="15" fill="rgb(249,43,39)" fg:x="12406619180" fg:w="4713939039"/><text x="1.6785%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1,337,757,977 samples, 0.15%)</title><rect x="2.0120%" y="341" width="0.1540%" height="15" fill="rgb(209,38,44)" fg:x="17473656021" fg:w="1337757977"/><text x="2.2620%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,337,757,977 samples, 0.15%)</title><rect x="2.0120%" y="325" width="0.1540%" height="15" fill="rgb(236,212,23)" fg:x="17473656021" fg:w="1337757977"/><text x="2.2620%" y="335.50"></text></g><g><title>[libc.so.6] (1,275,649,323 samples, 0.15%)</title><rect x="2.0191%" y="309" width="0.1469%" height="15" fill="rgb(242,79,21)" fg:x="17535764675" fg:w="1275649323"/><text x="2.2691%" y="319.50"></text></g><g><title>image_dds::bcn::decode::decode_bcn (9,366,901,636 samples, 1.08%)</title><rect x="1.0918%" y="373" width="1.0785%" height="15" fill="rgb(211,96,35)" fg:x="9482140345" fg:w="9366901636"/><text x="1.3418%" y="383.50"></text></g><g><title>image_dds::bcn::decode::put_rgba_block (1,728,483,762 samples, 0.20%)</title><rect x="1.9713%" y="357" width="0.1990%" height="15" fill="rgb(253,215,40)" fg:x="17120558219" fg:w="1728483762"/><text x="2.2213%" y="367.50"></text></g><g><title>&lt;u8 as image_dds::decode::Decode&gt;::decode (9,446,518,150 samples, 1.09%)</title><rect x="1.0908%" y="389" width="1.0877%" height="15" fill="rgb(211,81,21)" fg:x="9472988791" fg:w="9446518150"/><text x="1.3408%" y="399.50"></text></g><g><title>BitReader_ReadDistance (176,188,879 samples, 0.02%)</title><rect x="2.1821%" y="389" width="0.0203%" height="15" fill="rgb(208,190,38)" fg:x="18951196046" fg:w="176188879"/><text x="2.4321%" y="399.50"></text></g><g><title>BitReader_ReadDistanceB (214,363,273 samples, 0.02%)</title><rect x="2.2024%" y="389" width="0.0247%" height="15" fill="rgb(235,213,38)" fg:x="19127384925" fg:w="214363273"/><text x="2.4524%" y="399.50"></text></g><g><title>BitReader_Refill (156,052,917 samples, 0.02%)</title><rect x="2.2279%" y="389" width="0.0180%" height="15" fill="rgb(237,122,38)" fg:x="19348663241" fg:w="156052917"/><text x="2.4779%" y="399.50"></text></g><g><title>BitReader_RefillBackwards (133,822,195 samples, 0.02%)</title><rect x="2.2459%" y="389" width="0.0154%" height="15" fill="rgb(244,218,35)" fg:x="19504716158" fg:w="133822195"/><text x="2.4959%" y="399.50"></text></g><g><title>DecodeGolombRiceBits (87,978,507 samples, 0.01%)</title><rect x="2.2613%" y="389" width="0.0101%" height="15" fill="rgb(240,68,47)" fg:x="19638538353" fg:w="87978507"/><text x="2.5113%" y="399.50"></text></g><g><title>DecodeGolombRiceLengths (386,644,419 samples, 0.04%)</title><rect x="2.2714%" y="389" width="0.0445%" height="15" fill="rgb(210,16,53)" fg:x="19726516860" fg:w="386644419"/><text x="2.5214%" y="399.50"></text></g><g><title>FillByteOverflow16 (167,264,836 samples, 0.02%)</title><rect x="2.3919%" y="373" width="0.0193%" height="15" fill="rgb(235,124,12)" fg:x="20773236875" fg:w="167264836"/><text x="2.6419%" y="383.50"></text></g><g><title>Huff_MakeLut (2,202,664,423 samples, 0.25%)</title><rect x="2.3244%" y="389" width="0.2536%" height="15" fill="rgb(224,169,11)" fg:x="20186869302" fg:w="2202664423"/><text x="2.5744%" y="399.50"></text></g><g><title>[libc.so.6] (1,449,032,014 samples, 0.17%)</title><rect x="2.4112%" y="373" width="0.1668%" height="15" fill="rgb(250,166,2)" fg:x="20940501711" fg:w="1449032014"/><text x="2.6612%" y="383.50"></text></g><g><title>Huff_ReadCodeLengthsNew (394,334,037 samples, 0.05%)</title><rect x="2.5780%" y="389" width="0.0454%" height="15" fill="rgb(242,216,29)" fg:x="22389533725" fg:w="394334037"/><text x="2.8280%" y="399.50"></text></g><g><title>Krak_DecodeRLE (889,771,827 samples, 0.10%)</title><rect x="2.6234%" y="389" width="0.1025%" height="15" fill="rgb(230,116,27)" fg:x="22783867762" fg:w="889771827"/><text x="2.8734%" y="399.50"></text></g><g><title>[libc.so.6] (100,253,155 samples, 0.01%)</title><rect x="2.7411%" y="373" width="0.0115%" height="15" fill="rgb(228,99,48)" fg:x="23805379818" fg:w="100253155"/><text x="2.9911%" y="383.50"></text></g><g><title>Kraken_DecodeBytes (241,322,420 samples, 0.03%)</title><rect x="2.7269%" y="389" width="0.0278%" height="15" fill="rgb(253,11,6)" fg:x="23682086700" fg:w="241322420"/><text x="2.9769%" y="399.50"></text></g><g><title>Kraken_DecodeBytesCore (35,015,778,138 samples, 4.03%)</title><rect x="2.7546%" y="389" width="4.0319%" height="15" fill="rgb(247,143,39)" fg:x="23923409120" fg:w="35015778138"/><text x="3.0046%" y="399.50">Krak..</text></g><g><title>_mm_add_epi8 (819,752,064 samples, 0.09%)</title><rect x="10.9060%" y="373" width="0.0944%" height="15" fill="rgb(236,97,10)" fg:x="94716227039" fg:w="819752064"/><text x="11.1560%" y="383.50"></text></g><g><title>_mm_loadl_epi64 (1,474,887,808 samples, 0.17%)</title><rect x="11.0004%" y="373" width="0.1698%" height="15" fill="rgb(233,208,19)" fg:x="95535979103" fg:w="1474887808"/><text x="11.2504%" y="383.50"></text></g><g><title>_mm_set_epi64 (1,474,887,808 samples, 0.17%)</title><rect x="11.0004%" y="357" width="0.1698%" height="15" fill="rgb(216,164,2)" fg:x="95535979103" fg:w="1474887808"/><text x="11.2504%" y="367.50"></text></g><g><title>_mm_set_epi64x (1,474,887,808 samples, 0.17%)</title><rect x="11.0004%" y="341" width="0.1698%" height="15" fill="rgb(220,129,5)" fg:x="95535979103" fg:w="1474887808"/><text x="11.2504%" y="351.50"></text></g><g><title>Kraken_ProcessLzRuns_Type0 (38,763,844,176 samples, 4.46%)</title><rect x="6.7967%" y="389" width="4.4634%" height="15" fill="rgb(242,17,10)" fg:x="59027657365" fg:w="38763844176"/><text x="7.0467%" y="399.50">Krake..</text></g><g><title>_mm_storel_epi64 (780,634,630 samples, 0.09%)</title><rect x="11.1702%" y="373" width="0.0899%" height="15" fill="rgb(242,107,0)" fg:x="97010866911" fg:w="780634630"/><text x="11.4202%" y="383.50"></text></g><g><title>Kraken_ProcessLzRuns_Type1 (17,750,024,151 samples, 2.04%)</title><rect x="11.2601%" y="389" width="2.0438%" height="15" fill="rgb(251,28,31)" fg:x="97791501541" fg:w="17750024151"/><text x="11.5101%" y="399.50">K..</text></g><g><title>Kraken_UnpackOffsets (4,201,783,452 samples, 0.48%)</title><rect x="13.3131%" y="389" width="0.4838%" height="15" fill="rgb(233,223,10)" fg:x="115621074025" fg:w="4201783452"/><text x="13.5631%" y="399.50"></text></g><g><title>[libc.so.6] (114,325,230 samples, 0.01%)</title><rect x="13.8153%" y="373" width="0.0132%" height="15" fill="rgb(215,21,27)" fg:x="119982755645" fg:w="114325230"/><text x="14.0653%" y="383.50"></text></g><g><title>bcdec_rs::bc4_block (6,815,473,801 samples, 0.78%)</title><rect x="13.8386%" y="373" width="0.7848%" height="15" fill="rgb(232,23,21)" fg:x="120185144770" fg:w="6815473801"/><text x="14.0886%" y="383.50"></text></g><g><title>[libc.so.6] (1,013,471,580 samples, 0.12%)</title><rect x="14.6234%" y="197" width="0.1167%" height="15" fill="rgb(244,5,23)" fg:x="127000618571" fg:w="1013471580"/><text x="14.8734%" y="207.50"></text></g><g><title>alloc::vec::from_elem (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="357" width="0.1224%" height="15" fill="rgb(226,81,46)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="367.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="341" width="0.1224%" height="15" fill="rgb(247,70,30)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="325" width="0.1224%" height="15" fill="rgb(212,68,19)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="309" width="0.1224%" height="15" fill="rgb(240,187,13)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="293" width="0.1224%" height="15" fill="rgb(223,113,26)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="277" width="0.1224%" height="15" fill="rgb(206,192,2)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="261" width="0.1224%" height="15" fill="rgb(241,108,4)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="245" width="0.1224%" height="15" fill="rgb(247,173,49)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="255.50"></text></g><g><title>__rdl_alloc_zeroed (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="229" width="0.1224%" height="15" fill="rgb(224,114,35)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1,063,297,208 samples, 0.12%)</title><rect x="14.6234%" y="213" width="0.1224%" height="15" fill="rgb(245,159,27)" fg:x="127000618571" fg:w="1063297208"/><text x="14.8734%" y="223.50"></text></g><g><title>alloc::vec::from_elem (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="341" width="0.0175%" height="15" fill="rgb(245,172,44)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="351.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="325" width="0.0175%" height="15" fill="rgb(236,23,11)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="309" width="0.0175%" height="15" fill="rgb(205,117,38)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="293" width="0.0175%" height="15" fill="rgb(237,72,25)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="277" width="0.0175%" height="15" fill="rgb(244,70,9)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="261" width="0.0175%" height="15" fill="rgb(217,125,39)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="245" width="0.0175%" height="15" fill="rgb(235,36,10)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="229" width="0.0175%" height="15" fill="rgb(251,123,47)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="239.50"></text></g><g><title>__rdl_alloc_zeroed (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="213" width="0.0175%" height="15" fill="rgb(221,13,13)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="197" width="0.0175%" height="15" fill="rgb(238,131,9)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="207.50"></text></g><g><title>[libc.so.6] (151,982,554 samples, 0.02%)</title><rect x="14.7469%" y="181" width="0.0175%" height="15" fill="rgb(211,50,8)" fg:x="128073043131" fg:w="151982554"/><text x="14.9969%" y="191.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::read_tag (1,233,358,572 samples, 0.14%)</title><rect x="14.6234%" y="373" width="0.1420%" height="15" fill="rgb(245,182,24)" fg:x="127000618571" fg:w="1233358572"/><text x="14.8734%" y="383.50"></text></g><g><title>infinite_rs::module::file::read_single_block (170,061,364 samples, 0.02%)</title><rect x="14.7458%" y="357" width="0.0196%" height="15" fill="rgb(242,14,37)" fg:x="128063915779" fg:w="170061364"/><text x="14.9958%" y="367.50"></text></g><g><title>[libc.so.6] (8,339,216,763 samples, 0.96%)</title><rect x="13.8061%" y="389" width="0.9602%" height="15" fill="rgb(246,228,12)" fg:x="119902923273" fg:w="8339216763"/><text x="14.0561%" y="399.50"></text></g><g><title>bcdec_rs::bc5 (1,048,540,099 samples, 0.12%)</title><rect x="15.3650%" y="357" width="0.1207%" height="15" fill="rgb(213,55,15)" fg:x="133441137362" fg:w="1048540099"/><text x="15.6150%" y="367.50"></text></g><g><title>&lt;image_dds::bcn::Bc5S as image_dds::bcn::decode::BcnDecode&lt;[u8: 4]&gt;&gt;::decompress_block (16,612,866,822 samples, 1.91%)</title><rect x="14.7804%" y="373" width="1.9129%" height="15" fill="rgb(209,9,3)" fg:x="128363959850" fg:w="16612866822"/><text x="15.0304%" y="383.50">&lt;..</text></g><g><title>image_dds::snorm_to_unorm (10,487,149,211 samples, 1.21%)</title><rect x="15.4857%" y="357" width="1.2075%" height="15" fill="rgb(230,59,30)" fg:x="134489677461" fg:w="10487149211"/><text x="15.7357%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (201,713,969 samples, 0.02%)</title><rect x="16.6993%" y="325" width="0.0232%" height="15" fill="rgb(209,121,21)" fg:x="145029347276" fg:w="201713969"/><text x="16.9493%" y="335.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (201,713,969 samples, 0.02%)</title><rect x="16.6993%" y="309" width="0.0232%" height="15" fill="rgb(220,109,13)" fg:x="145029347276" fg:w="201713969"/><text x="16.9493%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (201,713,969 samples, 0.02%)</title><rect x="16.6993%" y="293" width="0.0232%" height="15" fill="rgb(232,18,1)" fg:x="145029347276" fg:w="201713969"/><text x="16.9493%" y="303.50"></text></g><g><title>serde_json::ser::format_escaped_str (201,713,969 samples, 0.02%)</title><rect x="16.6993%" y="277" width="0.0232%" height="15" fill="rgb(215,41,42)" fg:x="145029347276" fg:w="201713969"/><text x="16.9493%" y="287.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (148,062,321 samples, 0.02%)</title><rect x="16.7055%" y="261" width="0.0170%" height="15" fill="rgb(224,123,36)" fg:x="145082998924" fg:w="148062321"/><text x="16.9555%" y="271.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (245,417,705 samples, 0.03%)</title><rect x="16.6975%" y="341" width="0.0283%" height="15" fill="rgb(240,125,3)" fg:x="145014006389" fg:w="245417705"/><text x="16.9475%" y="351.50"></text></g><g><title>serde::ser::impls::_&lt;impl serde::ser::Serialize for [T: 3]&gt;::serialize (90,055,056 samples, 0.01%)</title><rect x="16.7270%" y="325" width="0.0104%" height="15" fill="rgb(205,98,50)" fg:x="145270312336" fg:w="90055056"/><text x="16.9770%" y="335.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (387,526,428 samples, 0.04%)</title><rect x="16.6950%" y="373" width="0.0446%" height="15" fill="rgb(205,185,37)" fg:x="144991909245" fg:w="387526428"/><text x="16.9450%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (365,429,284 samples, 0.04%)</title><rect x="16.6975%" y="357" width="0.0421%" height="15" fill="rgb(238,207,15)" fg:x="145014006389" fg:w="365429284"/><text x="16.9475%" y="367.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (120,011,579 samples, 0.01%)</title><rect x="16.7258%" y="341" width="0.0138%" height="15" fill="rgb(213,199,42)" fg:x="145259424094" fg:w="120011579"/><text x="16.9758%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (451,811,394 samples, 0.05%)</title><rect x="16.7443%" y="293" width="0.0520%" height="15" fill="rgb(235,201,11)" fg:x="145420112201" fg:w="451811394"/><text x="16.9943%" y="303.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (443,003,226 samples, 0.05%)</title><rect x="16.7453%" y="277" width="0.0510%" height="15" fill="rgb(207,46,11)" fg:x="145428920369" fg:w="443003226"/><text x="16.9953%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (443,003,226 samples, 0.05%)</title><rect x="16.7453%" y="261" width="0.0510%" height="15" fill="rgb(241,35,35)" fg:x="145428920369" fg:w="443003226"/><text x="16.9953%" y="271.50"></text></g><g><title>[libc.so.6] (440,478,789 samples, 0.05%)</title><rect x="16.7456%" y="245" width="0.0507%" height="15" fill="rgb(243,32,47)" fg:x="145431444806" fg:w="440478789"/><text x="16.9956%" y="255.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for f32&gt;::serialize (483,151,709 samples, 0.06%)</title><rect x="16.7410%" y="341" width="0.0556%" height="15" fill="rgb(247,202,23)" fg:x="145391671146" fg:w="483151709"/><text x="16.9910%" y="351.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_f32 (483,151,709 samples, 0.06%)</title><rect x="16.7410%" y="325" width="0.0556%" height="15" fill="rgb(219,102,11)" fg:x="145391671146" fg:w="483151709"/><text x="16.9910%" y="335.50"></text></g><g><title>serde_json::ser::Formatter::write_f32 (454,710,654 samples, 0.05%)</title><rect x="16.7443%" y="309" width="0.0524%" height="15" fill="rgb(243,110,44)" fg:x="145420112201" fg:w="454710654"/><text x="16.9943%" y="319.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeTuple&gt;::serialize_element (564,514,762 samples, 0.07%)</title><rect x="16.7396%" y="373" width="0.0650%" height="15" fill="rgb(222,74,54)" fg:x="145379435673" fg:w="564514762"/><text x="16.9896%" y="383.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeSeq&gt;::serialize_element (564,514,762 samples, 0.07%)</title><rect x="16.7396%" y="357" width="0.0650%" height="15" fill="rgb(216,99,12)" fg:x="145379435673" fg:w="564514762"/><text x="16.9896%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact::_{{closure}} (331,744,561 samples, 0.04%)</title><rect x="16.8397%" y="341" width="0.0382%" height="15" fill="rgb(226,22,26)" fg:x="146248860035" fg:w="331744561"/><text x="17.0897%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (331,744,561 samples, 0.04%)</title><rect x="16.8397%" y="325" width="0.0382%" height="15" fill="rgb(217,163,10)" fg:x="146248860035" fg:w="331744561"/><text x="17.0897%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (331,744,561 samples, 0.04%)</title><rect x="16.8397%" y="309" width="0.0382%" height="15" fill="rgb(213,25,53)" fg:x="146248860035" fg:w="331744561"/><text x="17.0897%" y="319.50"></text></g><g><title>[libc.so.6] (315,353,292 samples, 0.04%)</title><rect x="16.8416%" y="293" width="0.0363%" height="15" fill="rgb(252,105,26)" fg:x="146265251304" fg:w="315353292"/><text x="17.0916%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume_with (498,180,741 samples, 0.06%)</title><rect x="16.8325%" y="357" width="0.0574%" height="15" fill="rgb(220,39,43)" fg:x="146186190795" fg:w="498180741"/><text x="17.0825%" y="367.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (95,652,708 samples, 0.01%)</title><rect x="16.8788%" y="341" width="0.0110%" height="15" fill="rgb(229,68,48)" fg:x="146588718828" fg:w="95652708"/><text x="17.1288%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (216,304,463 samples, 0.02%)</title><rect x="16.8935%" y="341" width="0.0249%" height="15" fill="rgb(252,8,32)" fg:x="146716454312" fg:w="216304463"/><text x="17.1435%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (102,875,047 samples, 0.01%)</title><rect x="16.9066%" y="325" width="0.0118%" height="15" fill="rgb(223,20,43)" fg:x="146829883728" fg:w="102875047"/><text x="17.1566%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (102,875,047 samples, 0.01%)</title><rect x="16.9066%" y="309" width="0.0118%" height="15" fill="rgb(229,81,49)" fg:x="146829883728" fg:w="102875047"/><text x="17.1566%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (102,875,047 samples, 0.01%)</title><rect x="16.9066%" y="293" width="0.0118%" height="15" fill="rgb(236,28,36)" fg:x="146829883728" fg:w="102875047"/><text x="17.1566%" y="303.50"></text></g><g><title>[libc.so.6] (90,117,408 samples, 0.01%)</title><rect x="16.9081%" y="277" width="0.0104%" height="15" fill="rgb(249,185,26)" fg:x="146842641367" fg:w="90117408"/><text x="17.1581%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (979,969,843 samples, 0.11%)</title><rect x="16.8062%" y="373" width="0.1128%" height="15" fill="rgb(249,174,33)" fg:x="145957586830" fg:w="979969843"/><text x="17.0562%" y="383.50"></text></g><g><title>std::io::default_read_exact (253,185,137 samples, 0.03%)</title><rect x="16.8898%" y="357" width="0.0292%" height="15" fill="rgb(233,201,37)" fg:x="146684371536" fg:w="253185137"/><text x="17.1398%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (1,566,810,966 samples, 0.18%)</title><rect x="16.9190%" y="373" width="0.1804%" height="15" fill="rgb(221,78,26)" fg:x="146937556673" fg:w="1566810966"/><text x="17.1690%" y="383.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_to_end (1,562,658,068 samples, 0.18%)</title><rect x="16.9195%" y="357" width="0.1799%" height="15" fill="rgb(250,127,30)" fg:x="146941709571" fg:w="1562658068"/><text x="17.1695%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1,558,236,044 samples, 0.18%)</title><rect x="16.9200%" y="341" width="0.1794%" height="15" fill="rgb(230,49,44)" fg:x="146946131595" fg:w="1558236044"/><text x="17.1700%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1,558,236,044 samples, 0.18%)</title><rect x="16.9200%" y="325" width="0.1794%" height="15" fill="rgb(229,67,23)" fg:x="146946131595" fg:w="1558236044"/><text x="17.1700%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1,558,236,044 samples, 0.18%)</title><rect x="16.9200%" y="309" width="0.1794%" height="15" fill="rgb(249,83,47)" fg:x="146946131595" fg:w="1558236044"/><text x="17.1700%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,558,236,044 samples, 0.18%)</title><rect x="16.9200%" y="293" width="0.1794%" height="15" fill="rgb(215,43,3)" fg:x="146946131595" fg:w="1558236044"/><text x="17.1700%" y="303.50"></text></g><g><title>[libc.so.6] (1,558,236,044 samples, 0.18%)</title><rect x="16.9200%" y="277" width="0.1794%" height="15" fill="rgb(238,154,13)" fg:x="146946131595" fg:w="1558236044"/><text x="17.1700%" y="287.50"></text></g><g><title>&lt;u8 as image_dds::decode::Decode&gt;::decode (177,032,875 samples, 0.02%)</title><rect x="17.0999%" y="373" width="0.0204%" height="15" fill="rgb(219,56,2)" fg:x="148508603841" fg:w="177032875"/><text x="17.3499%" y="383.50"></text></g><g><title>image_dds::bcn::decode::decode_bcn (172,906,837 samples, 0.02%)</title><rect x="17.1004%" y="357" width="0.0199%" height="15" fill="rgb(233,0,4)" fg:x="148512729879" fg:w="172906837"/><text x="17.3504%" y="367.50"></text></g><g><title>image_dds::bcn::decode::put_rgba_block (172,906,837 samples, 0.02%)</title><rect x="17.1004%" y="341" width="0.0199%" height="15" fill="rgb(235,30,7)" fg:x="148512729879" fg:w="172906837"/><text x="17.3504%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (172,906,837 samples, 0.02%)</title><rect x="17.1004%" y="325" width="0.0199%" height="15" fill="rgb(250,79,13)" fg:x="148512729879" fg:w="172906837"/><text x="17.3504%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (172,906,837 samples, 0.02%)</title><rect x="17.1004%" y="309" width="0.0199%" height="15" fill="rgb(211,146,34)" fg:x="148512729879" fg:w="172906837"/><text x="17.3504%" y="319.50"></text></g><g><title>[libc.so.6] (112,138,145 samples, 0.01%)</title><rect x="17.1074%" y="293" width="0.0129%" height="15" fill="rgb(228,22,38)" fg:x="148573498571" fg:w="112138145"/><text x="17.3574%" y="303.50"></text></g><g><title>BitReader_ReadBitsNoRefill (135,566,853 samples, 0.02%)</title><rect x="17.1241%" y="373" width="0.0156%" height="15" fill="rgb(235,168,5)" fg:x="148718686455" fg:w="135566853"/><text x="17.3741%" y="383.50"></text></g><g><title>BitReader_ReadBitsNoRefillZero (110,810,252 samples, 0.01%)</title><rect x="17.1397%" y="373" width="0.0128%" height="15" fill="rgb(221,155,16)" fg:x="148854253308" fg:w="110810252"/><text x="17.3897%" y="383.50"></text></g><g><title>BitReader_ReadDistance (6,110,972,103 samples, 0.70%)</title><rect x="17.1525%" y="373" width="0.7036%" height="15" fill="rgb(215,215,53)" fg:x="148965063560" fg:w="6110972103"/><text x="17.4025%" y="383.50"></text></g><g><title>BitReader_ReadDistanceB (6,563,037,665 samples, 0.76%)</title><rect x="17.8561%" y="373" width="0.7557%" height="15" fill="rgb(223,4,10)" fg:x="155076035663" fg:w="6563037665"/><text x="18.1061%" y="383.50"></text></g><g><title>BitReader_Refill (5,139,089,256 samples, 0.59%)</title><rect x="18.6277%" y="373" width="0.5917%" height="15" fill="rgb(234,103,6)" fg:x="161777653345" fg:w="5139089256"/><text x="18.8777%" y="383.50"></text></g><g><title>BitReader_RefillBackwards (4,745,115,537 samples, 0.55%)</title><rect x="19.2195%" y="373" width="0.5464%" height="15" fill="rgb(227,97,0)" fg:x="166916742601" fg:w="4745115537"/><text x="19.4695%" y="383.50"></text></g><g><title>Huff_ReadCodeLengthsNew (171,700,190 samples, 0.02%)</title><rect x="19.7718%" y="373" width="0.0198%" height="15" fill="rgb(234,150,53)" fg:x="171713724045" fg:w="171700190"/><text x="20.0218%" y="383.50"></text></g><g><title>Krak_DecodeRLE (1,257,579,417 samples, 0.14%)</title><rect x="19.7916%" y="373" width="0.1448%" height="15" fill="rgb(228,201,54)" fg:x="171885424235" fg:w="1257579417"/><text x="20.0416%" y="383.50"></text></g><g><title>Kraken_DecodeBytesCore (352,613,662 samples, 0.04%)</title><rect x="19.9398%" y="373" width="0.0406%" height="15" fill="rgb(222,22,37)" fg:x="173172193027" fg:w="352613662"/><text x="20.1898%" y="383.50"></text></g><g><title>Kraken_DecodeBytes_Type12 (129,827,103 samples, 0.01%)</title><rect x="19.9804%" y="373" width="0.0149%" height="15" fill="rgb(237,53,32)" fg:x="173524806689" fg:w="129827103"/><text x="20.2304%" y="383.50"></text></g><g><title>MallocAligned (96,940,560 samples, 0.01%)</title><rect x="20.0160%" y="373" width="0.0112%" height="15" fill="rgb(233,25,53)" fg:x="173834502149" fg:w="96940560"/><text x="20.2660%" y="383.50"></text></g><g><title>_mm_loadl_epi64 (251,072,397 samples, 0.03%)</title><rect x="20.0445%" y="357" width="0.0289%" height="15" fill="rgb(210,40,34)" fg:x="174081671998" fg:w="251072397"/><text x="20.2945%" y="367.50"></text></g><g><title>_mm_set_epi64 (251,072,397 samples, 0.03%)</title><rect x="20.0445%" y="341" width="0.0289%" height="15" fill="rgb(241,220,44)" fg:x="174081671998" fg:w="251072397"/><text x="20.2945%" y="351.50"></text></g><g><title>_mm_set_epi64x (251,072,397 samples, 0.03%)</title><rect x="20.0445%" y="325" width="0.0289%" height="15" fill="rgb(235,28,35)" fg:x="174081671998" fg:w="251072397"/><text x="20.2945%" y="335.50"></text></g><g><title>_mm_storeh_pi (422,026,322 samples, 0.05%)</title><rect x="20.0734%" y="357" width="0.0486%" height="15" fill="rgb(210,56,17)" fg:x="174332744395" fg:w="422026322"/><text x="20.3234%" y="367.50"></text></g><g><title>_mm_storel_epi64 (146,355,562 samples, 0.02%)</title><rect x="20.1220%" y="357" width="0.0169%" height="15" fill="rgb(224,130,29)" fg:x="174754770717" fg:w="146355562"/><text x="20.3720%" y="367.50"></text></g><g><title>_mm_unpackhi_epi8 (112,576,132 samples, 0.01%)</title><rect x="20.1388%" y="357" width="0.0130%" height="15" fill="rgb(235,212,8)" fg:x="174901126279" fg:w="112576132"/><text x="20.3888%" y="367.50"></text></g><g><title>ReverseBitsArray2048 (1,232,622,226 samples, 0.14%)</title><rect x="20.0272%" y="373" width="0.1419%" height="15" fill="rgb(223,33,50)" fg:x="173931442709" fg:w="1232622226"/><text x="20.2772%" y="383.50"></text></g><g><title>_mm_unpacklo_epi8 (150,362,524 samples, 0.02%)</title><rect x="20.1518%" y="357" width="0.0173%" height="15" fill="rgb(219,149,13)" fg:x="175013702411" fg:w="150362524"/><text x="20.4018%" y="367.50"></text></g><g><title>[libc.so.6] (199,771,430 samples, 0.02%)</title><rect x="20.1846%" y="165" width="0.0230%" height="15" fill="rgb(250,156,29)" fg:x="175298641420" fg:w="199771430"/><text x="20.4346%" y="175.50"></text></g><g><title>alloc::vec::from_elem (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="325" width="0.0235%" height="15" fill="rgb(216,193,19)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="335.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="309" width="0.0235%" height="15" fill="rgb(216,135,14)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="293" width="0.0235%" height="15" fill="rgb(241,47,5)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="277" width="0.0235%" height="15" fill="rgb(233,42,35)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="261" width="0.0235%" height="15" fill="rgb(231,13,6)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="245" width="0.0235%" height="15" fill="rgb(207,181,40)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="229" width="0.0235%" height="15" fill="rgb(254,173,49)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="213" width="0.0235%" height="15" fill="rgb(221,1,38)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="197" width="0.0235%" height="15" fill="rgb(206,124,46)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (204,285,298 samples, 0.02%)</title><rect x="20.1846%" y="181" width="0.0235%" height="15" fill="rgb(249,21,11)" fg:x="175298641420" fg:w="204285298"/><text x="20.4346%" y="191.50"></text></g><g><title>[libc.so.6] (330,369,018 samples, 0.04%)</title><rect x="20.1707%" y="373" width="0.0380%" height="15" fill="rgb(222,201,40)" fg:x="175177437945" fg:w="330369018"/><text x="20.4207%" y="383.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::read_tag (221,775,808 samples, 0.03%)</title><rect x="20.1832%" y="357" width="0.0255%" height="15" fill="rgb(235,61,29)" fg:x="175286031155" fg:w="221775808"/><text x="20.4332%" y="367.50"></text></g><g><title>infinite_rs::module::file::read_single_block (221,775,808 samples, 0.03%)</title><rect x="20.1832%" y="341" width="0.0255%" height="15" fill="rgb(219,207,3)" fg:x="175286031155" fg:w="221775808"/><text x="20.4332%" y="351.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (112,850,620 samples, 0.01%)</title><rect x="20.2093%" y="357" width="0.0130%" height="15" fill="rgb(222,56,46)" fg:x="175512625749" fg:w="112850620"/><text x="20.4593%" y="367.50"></text></g><g><title>Huff_ConvertToRanges (584,423,847 samples, 0.07%)</title><rect x="20.2266%" y="357" width="0.0673%" height="15" fill="rgb(239,76,54)" fg:x="175663264204" fg:w="584423847"/><text x="20.4766%" y="367.50"></text></g><g><title>Huff_ReadCodeLengthsNew (1,252,493,582 samples, 0.14%)</title><rect x="20.2939%" y="357" width="0.1442%" height="15" fill="rgb(231,124,27)" fg:x="176247688051" fg:w="1252493582"/><text x="20.5439%" y="367.50"></text></g><g><title>[unknown] (2,226,609,098 samples, 0.26%)</title><rect x="20.2087%" y="373" width="0.2564%" height="15" fill="rgb(249,195,6)" fg:x="175507806963" fg:w="2226609098"/><text x="20.4587%" y="383.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks (194,082,994 samples, 0.02%)</title><rect x="20.4427%" y="357" width="0.0223%" height="15" fill="rgb(237,174,47)" fg:x="177540333067" fg:w="194082994"/><text x="20.6927%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="341" width="0.0146%" height="15" fill="rgb(206,201,31)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="351.50"></text></g><g><title>&lt;u32 as core::iter::traits::accum::Sum&gt;::sum (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="325" width="0.0146%" height="15" fill="rgb(231,57,52)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="309" width="0.0146%" height="15" fill="rgb(248,177,22)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="293" width="0.0146%" height="15" fill="rgb(215,211,37)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="277" width="0.0146%" height="15" fill="rgb(241,128,51)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="287.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (126,470,168 samples, 0.01%)</title><rect x="20.4505%" y="261" width="0.0146%" height="15" fill="rgb(227,165,31)" fg:x="177607945893" fg:w="126470168"/><text x="20.7005%" y="271.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks::_{{closure}} (99,168,376 samples, 0.01%)</title><rect x="20.4537%" y="245" width="0.0114%" height="15" fill="rgb(228,167,24)" fg:x="177635247685" fg:w="99168376"/><text x="20.7037%" y="255.50"></text></g><g><title>&lt;infinite_rs::tag::datablock::TagSectionType as core::cmp::PartialEq&gt;::eq (99,168,376 samples, 0.01%)</title><rect x="20.4537%" y="229" width="0.0114%" height="15" fill="rgb(228,143,12)" fg:x="177635247685" fg:w="99168376"/><text x="20.7037%" y="239.50"></text></g><g><title>__rdl_realloc (153,296,006 samples, 0.02%)</title><rect x="20.4841%" y="309" width="0.0177%" height="15" fill="rgb(249,149,8)" fg:x="177899974581" fg:w="153296006"/><text x="20.7341%" y="319.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (153,296,006 samples, 0.02%)</title><rect x="20.4841%" y="293" width="0.0177%" height="15" fill="rgb(243,35,44)" fg:x="177899974581" fg:w="153296006"/><text x="20.7341%" y="303.50"></text></g><g><title>realloc (148,429,067 samples, 0.02%)</title><rect x="20.4847%" y="277" width="0.0171%" height="15" fill="rgb(246,89,9)" fg:x="177904841520" fg:w="148429067"/><text x="20.7347%" y="287.50"></text></g><g><title>[libc.so.6] (139,845,923 samples, 0.02%)</title><rect x="20.4857%" y="261" width="0.0161%" height="15" fill="rgb(233,213,13)" fg:x="177913424664" fg:w="139845923"/><text x="20.7357%" y="271.50"></text></g><g><title>[libc.so.6] (129,287,575 samples, 0.01%)</title><rect x="20.4869%" y="245" width="0.0149%" height="15" fill="rgb(233,141,41)" fg:x="177923983012" fg:w="129287575"/><text x="20.7369%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (172,905,966 samples, 0.02%)</title><rect x="20.4836%" y="357" width="0.0199%" height="15" fill="rgb(239,167,4)" fg:x="177895161360" fg:w="172905966"/><text x="20.7336%" y="367.50"></text></g><g><title>alloc::alloc::Global::grow_impl (172,905,966 samples, 0.02%)</title><rect x="20.4836%" y="341" width="0.0199%" height="15" fill="rgb(209,217,16)" fg:x="177895161360" fg:w="172905966"/><text x="20.7336%" y="351.50"></text></g><g><title>alloc::alloc::realloc (170,620,404 samples, 0.02%)</title><rect x="20.4838%" y="325" width="0.0196%" height="15" fill="rgb(219,88,35)" fg:x="177897446922" fg:w="170620404"/><text x="20.7338%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (402,866,095 samples, 0.05%)</title><rect x="20.4802%" y="373" width="0.0464%" height="15" fill="rgb(220,193,23)" fg:x="177865607102" fg:w="402866095"/><text x="20.7302%" y="383.50"></text></g><g><title>malloc (181,617,909 samples, 0.02%)</title><rect x="20.5057%" y="357" width="0.0209%" height="15" fill="rgb(230,90,52)" fg:x="178086855288" fg:w="181617909"/><text x="20.7557%" y="367.50"></text></g><g><title>[libc.so.6] (130,686,909 samples, 0.02%)</title><rect x="20.5115%" y="341" width="0.0150%" height="15" fill="rgb(252,106,19)" fg:x="178137786288" fg:w="130686909"/><text x="20.7615%" y="351.50"></text></g><g><title>bcdec_rs::bc4_block (10,449,101,741 samples, 1.20%)</title><rect x="20.5271%" y="373" width="1.2032%" height="15" fill="rgb(206,74,20)" fg:x="178273093668" fg:w="10449101741"/><text x="20.7771%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::take::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (803,769,061 samples, 0.09%)</title><rect x="21.7904%" y="357" width="0.0925%" height="15" fill="rgb(230,138,44)" fg:x="189244392690" fg:w="803769061"/><text x="22.0404%" y="367.50"></text></g><g><title>bcdec_rs::Bitstream::read_bits (112,893,980 samples, 0.01%)</title><rect x="21.8892%" y="357" width="0.0130%" height="15" fill="rgb(235,182,43)" fg:x="190102395497" fg:w="112893980"/><text x="22.1392%" y="367.50"></text></g><g><title>bcdec_rs::bc7 (1,515,459,738 samples, 0.17%)</title><rect x="21.7303%" y="373" width="0.1745%" height="15" fill="rgb(242,16,51)" fg:x="188722195409" fg:w="1515459738"/><text x="21.9803%" y="383.50"></text></g><g><title>bcdec_rs::color_block (718,225,502 samples, 0.08%)</title><rect x="21.9048%" y="373" width="0.0827%" height="15" fill="rgb(248,9,4)" fg:x="190237655147" fg:w="718225502"/><text x="22.1548%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (262,856,910 samples, 0.03%)</title><rect x="21.9572%" y="357" width="0.0303%" height="15" fill="rgb(210,31,22)" fg:x="190693023739" fg:w="262856910"/><text x="22.2072%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (262,856,910 samples, 0.03%)</title><rect x="21.9572%" y="341" width="0.0303%" height="15" fill="rgb(239,54,39)" fg:x="190693023739" fg:w="262856910"/><text x="22.2072%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(i32,ekur::definitions::scenario::ScenarioStructureBsp)&gt;&gt; (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="373" width="0.0177%" height="15" fill="rgb(230,99,41)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="383.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="357" width="0.0177%" height="15" fill="rgb(253,106,12)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_inner_table (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="341" width="0.0177%" height="15" fill="rgb(213,46,41)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner::drop_elements (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="325" width="0.0177%" height="15" fill="rgb(215,133,35)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="309" width="0.0177%" height="15" fill="rgb(213,28,5)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="293" width="0.0177%" height="15" fill="rgb(215,77,49)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;(i32,ekur::definitions::scenario::ScenarioStructureBsp)&gt; (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="277" width="0.0177%" height="15" fill="rgb(248,100,22)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::scenario::ScenarioStructureBsp&gt; (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="261" width="0.0177%" height="15" fill="rgb(208,67,9)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="271.50"></text></g><g><title>cfree (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="245" width="0.0177%" height="15" fill="rgb(219,133,21)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="255.50"></text></g><g><title>[libc.so.6] (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="229" width="0.0177%" height="15" fill="rgb(246,46,29)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="239.50"></text></g><g><title>[libc.so.6] (153,401,667 samples, 0.02%)</title><rect x="22.0053%" y="213" width="0.0177%" height="15" fill="rgb(246,185,52)" fg:x="191110835448" fg:w="153401667"/><text x="22.2553%" y="223.50"></text></g><g><title>[libc.so.6] (101,014,250 samples, 0.01%)</title><rect x="22.0113%" y="197" width="0.0116%" height="15" fill="rgb(252,136,11)" fg:x="191163222865" fg:w="101014250"/><text x="22.2613%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::position (437,594,696 samples, 0.05%)</title><rect x="22.0251%" y="357" width="0.0504%" height="15" fill="rgb(219,138,53)" fg:x="191282985704" fg:w="437594696"/><text x="22.2751%" y="367.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (8,380,090,258 samples, 0.96%)</title><rect x="22.3899%" y="309" width="0.9649%" height="15" fill="rgb(211,51,23)" fg:x="194451175998" fg:w="8380090258"/><text x="22.6399%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::unchecked_iterator::UncheckedIterator&gt;::next_unchecked (7,590,157,333 samples, 0.87%)</title><rect x="22.4809%" y="293" width="0.8740%" height="15" fill="rgb(247,221,28)" fg:x="195241108923" fg:w="7590157333"/><text x="22.7309%" y="303.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (7,590,157,333 samples, 0.87%)</title><rect x="22.4809%" y="277" width="0.8740%" height="15" fill="rgb(251,222,45)" fg:x="195241108923" fg:w="7590157333"/><text x="22.7309%" y="287.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (7,590,157,333 samples, 0.87%)</title><rect x="22.4809%" y="261" width="0.8740%" height="15" fill="rgb(217,162,53)" fg:x="195241108923" fg:w="7590157333"/><text x="22.7309%" y="271.50"></text></g><g><title>&lt;core::slice::iter::IterMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (166,563,554,587 samples, 19.18%)</title><rect x="22.0755%" y="357" width="19.1788%" height="15" fill="rgb(229,93,14)" fg:x="191720580400" fg:w="166563554587"/><text x="22.3255%" y="367.50">&lt;core::slice::iter::IterMut&lt;T&gt;..</text></g><g><title>ekur::bitmap::extract::extract_all_bitmaps::_{{closure}} (166,554,862,500 samples, 19.18%)</title><rect x="22.0765%" y="341" width="19.1778%" height="15" fill="rgb(209,67,49)" fg:x="191729272487" fg:w="166554862500"/><text x="22.3265%" y="351.50">ekur::bitmap::extract::extract..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (166,533,018,500 samples, 19.18%)</title><rect x="22.0790%" y="325" width="19.1753%" height="15" fill="rgb(213,87,29)" fg:x="191751116487" fg:w="166533018500"/><text x="22.3290%" y="335.50">&lt;core::slice::iter::Iter&lt;T&gt; as..</text></g><g><title>ekur::bitmap::extract::extract_all_bitmaps::_{{closure}}::_{{closure}} (155,452,868,731 samples, 17.90%)</title><rect x="23.3548%" y="309" width="17.8995%" height="15" fill="rgb(205,151,52)" fg:x="202831266256" fg:w="155452868731"/><text x="23.6048%" y="319.50">ekur::bitmap::extract::extra..</text></g><g><title>ekur::bitmap::extract::extract_all_bitmaps (167,102,409,348 samples, 19.24%)</title><rect x="22.0245%" y="373" width="19.2409%" height="15" fill="rgb(253,215,39)" fg:x="191278056069" fg:w="167102409348"/><text x="22.2745%" y="383.50">ekur::bitmap::extract::extract..</text></g><g><title>ekur::loader::module::get_models (103,906,761 samples, 0.01%)</title><rect x="41.2654%" y="373" width="0.0120%" height="15" fill="rgb(221,220,41)" fg:x="358380465417" fg:w="103906761"/><text x="41.5154%" y="383.50"></text></g><g><title>ekur::loader::module::get_tags (230,256,147 samples, 0.03%)</title><rect x="41.2774%" y="373" width="0.0265%" height="15" fill="rgb(218,133,21)" fg:x="358484372178" fg:w="230256147"/><text x="41.5274%" y="383.50"></text></g><g><title>[libc.so.6] (768,334,853 samples, 0.09%)</title><rect x="41.3125%" y="197" width="0.0885%" height="15" fill="rgb(221,193,43)" fg:x="358789408529" fg:w="768334853"/><text x="41.5625%" y="207.50"></text></g><g><title>alloc::vec::from_elem (861,467,677 samples, 0.10%)</title><rect x="41.3121%" y="357" width="0.0992%" height="15" fill="rgb(240,128,52)" fg:x="358785803090" fg:w="861467677"/><text x="41.5621%" y="367.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (861,467,677 samples, 0.10%)</title><rect x="41.3121%" y="341" width="0.0992%" height="15" fill="rgb(253,114,12)" fg:x="358785803090" fg:w="861467677"/><text x="41.5621%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (861,467,677 samples, 0.10%)</title><rect x="41.3121%" y="325" width="0.0992%" height="15" fill="rgb(215,223,47)" fg:x="358785803090" fg:w="861467677"/><text x="41.5621%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (861,467,677 samples, 0.10%)</title><rect x="41.3121%" y="309" width="0.0992%" height="15" fill="rgb(248,225,23)" fg:x="358785803090" fg:w="861467677"/><text x="41.5621%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (861,467,677 samples, 0.10%)</title><rect x="41.3121%" y="293" width="0.0992%" height="15" fill="rgb(250,108,0)" fg:x="358785803090" fg:w="861467677"/><text x="41.5621%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (857,862,238 samples, 0.10%)</title><rect x="41.3125%" y="277" width="0.0988%" height="15" fill="rgb(228,208,7)" fg:x="358789408529" fg:w="857862238"/><text x="41.5625%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (857,862,238 samples, 0.10%)</title><rect x="41.3125%" y="261" width="0.0988%" height="15" fill="rgb(244,45,10)" fg:x="358789408529" fg:w="857862238"/><text x="41.5625%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (857,862,238 samples, 0.10%)</title><rect x="41.3125%" y="245" width="0.0988%" height="15" fill="rgb(207,125,25)" fg:x="358789408529" fg:w="857862238"/><text x="41.5625%" y="255.50"></text></g><g><title>__rdl_alloc_zeroed (857,862,238 samples, 0.10%)</title><rect x="41.3125%" y="229" width="0.0988%" height="15" fill="rgb(210,195,18)" fg:x="358789408529" fg:w="857862238"/><text x="41.5625%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (857,862,238 samples, 0.10%)</title><rect x="41.3125%" y="213" width="0.0988%" height="15" fill="rgb(249,80,12)" fg:x="358789408529" fg:w="857862238"/><text x="41.5625%" y="223.50"></text></g><g><title>__libc_calloc (89,527,385 samples, 0.01%)</title><rect x="41.4010%" y="197" width="0.0103%" height="15" fill="rgb(221,65,9)" fg:x="359557743382" fg:w="89527385"/><text x="41.6510%" y="207.50"></text></g><g><title>ekur::model::utils::get_resource_data (2,792,399,740 samples, 0.32%)</title><rect x="41.3070%" y="373" width="0.3215%" height="15" fill="rgb(235,49,36)" fg:x="358741766098" fg:w="2792399740"/><text x="41.5570%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (1,886,895,071 samples, 0.22%)</title><rect x="41.4113%" y="357" width="0.2173%" height="15" fill="rgb(225,32,20)" fg:x="359647270767" fg:w="1886895071"/><text x="41.6613%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,886,895,071 samples, 0.22%)</title><rect x="41.4113%" y="341" width="0.2173%" height="15" fill="rgb(215,141,46)" fg:x="359647270767" fg:w="1886895071"/><text x="41.6613%" y="351.50"></text></g><g><title>[libc.so.6] (1,883,923,493 samples, 0.22%)</title><rect x="41.4116%" y="325" width="0.2169%" height="15" fill="rgb(250,160,47)" fg:x="359650242345" fg:w="1883923493"/><text x="41.6616%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (142,717,724 samples, 0.02%)</title><rect x="41.6369%" y="357" width="0.0164%" height="15" fill="rgb(216,222,40)" fg:x="361606891057" fg:w="142717724"/><text x="41.8869%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (142,717,724 samples, 0.02%)</title><rect x="41.6369%" y="341" width="0.0164%" height="15" fill="rgb(234,217,39)" fg:x="361606891057" fg:w="142717724"/><text x="41.8869%" y="351.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (3,375,045,958 samples, 0.39%)</title><rect x="41.6533%" y="357" width="0.3886%" height="15" fill="rgb(207,178,40)" fg:x="361749608781" fg:w="3375045958"/><text x="41.9033%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (3,375,045,958 samples, 0.39%)</title><rect x="41.6533%" y="341" width="0.3886%" height="15" fill="rgb(221,136,13)" fg:x="361749608781" fg:w="3375045958"/><text x="41.9033%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::needs_to_grow (283,036,269 samples, 0.03%)</title><rect x="42.0609%" y="245" width="0.0326%" height="15" fill="rgb(249,199,10)" fg:x="365289203667" fg:w="283036269"/><text x="42.3109%" y="255.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (117,198,394 samples, 0.01%)</title><rect x="42.0800%" y="229" width="0.0135%" height="15" fill="rgb(249,222,13)" fg:x="365455041542" fg:w="117198394"/><text x="42.3300%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (307,704,423 samples, 0.04%)</title><rect x="42.0596%" y="293" width="0.0354%" height="15" fill="rgb(244,185,38)" fg:x="365278200493" fg:w="307704423"/><text x="42.3096%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (307,704,423 samples, 0.04%)</title><rect x="42.0596%" y="277" width="0.0354%" height="15" fill="rgb(236,202,9)" fg:x="365278200493" fg:w="307704423"/><text x="42.3096%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::reserve (307,704,423 samples, 0.04%)</title><rect x="42.0596%" y="261" width="0.0354%" height="15" fill="rgb(250,229,37)" fg:x="365278200493" fg:w="307704423"/><text x="42.3096%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,445,665,888 samples, 1.43%)</title><rect x="42.0951%" y="293" width="1.4330%" height="15" fill="rgb(206,174,23)" fg:x="365585904916" fg:w="12445665888"/><text x="42.3451%" y="303.50"></text></g><g><title>[libc.so.6] (12,383,540,552 samples, 1.43%)</title><rect x="42.1022%" y="277" width="1.4259%" height="15" fill="rgb(211,33,43)" fg:x="365648030252" fg:w="12383540552"/><text x="42.3522%" y="287.50"></text></g><g><title>ekur::model::vertex_buffer::write_buffer (16,648,697,275 samples, 1.92%)</title><rect x="41.6285%" y="373" width="1.9170%" height="15" fill="rgb(245,58,50)" fg:x="361534165838" fg:w="16648697275"/><text x="41.8785%" y="383.50">e..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (13,058,208,374 samples, 1.50%)</title><rect x="42.0420%" y="357" width="1.5036%" height="15" fill="rgb(244,68,36)" fg:x="365124654739" fg:w="13058208374"/><text x="42.2920%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (13,058,208,374 samples, 1.50%)</title><rect x="42.0420%" y="341" width="1.5036%" height="15" fill="rgb(232,229,15)" fg:x="365124654739" fg:w="13058208374"/><text x="42.2920%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (13,058,208,374 samples, 1.50%)</title><rect x="42.0420%" y="325" width="1.5036%" height="15" fill="rgb(254,30,23)" fg:x="365124654739" fg:w="13058208374"/><text x="42.2920%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (13,058,208,374 samples, 1.50%)</title><rect x="42.0420%" y="309" width="1.5036%" height="15" fill="rgb(235,160,14)" fg:x="365124654739" fg:w="13058208374"/><text x="42.2920%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (151,292,309 samples, 0.02%)</title><rect x="43.5281%" y="293" width="0.0174%" height="15" fill="rgb(212,155,44)" fg:x="378031570804" fg:w="151292309"/><text x="43.7781%" y="303.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_run (8,362,089,983 samples, 0.96%)</title><rect x="43.5601%" y="373" width="0.9628%" height="15" fill="rgb(226,2,50)" fg:x="378309697920" fg:w="8362089983"/><text x="43.8101%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="357" width="0.5028%" height="15" fill="rgb(234,177,6)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="367.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;T&gt; as std::io::Read&gt;::read_to_end (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="341" width="0.5028%" height="15" fill="rgb(217,24,9)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="325" width="0.5028%" height="15" fill="rgb(220,13,46)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="309" width="0.5028%" height="15" fill="rgb(239,221,27)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="293" width="0.5028%" height="15" fill="rgb(222,198,25)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="277" width="0.5028%" height="15" fill="rgb(211,99,13)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="287.50"></text></g><g><title>[libc.so.6] (4,366,394,188 samples, 0.50%)</title><rect x="44.5279%" y="261" width="0.5028%" height="15" fill="rgb(232,111,31)" fg:x="386714375484" fg:w="4366394188"/><text x="44.7779%" y="271.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::get_raw_data (4,394,959,788 samples, 0.51%)</title><rect x="44.5267%" y="373" width="0.5061%" height="15" fill="rgb(245,82,37)" fg:x="386704345935" fg:w="4394959788"/><text x="44.7767%" y="383.50"></text></g><g><title>[libc.so.6] (2,785,486,859 samples, 0.32%)</title><rect x="45.0352%" y="197" width="0.3207%" height="15" fill="rgb(227,149,46)" fg:x="391120410836" fg:w="2785486859"/><text x="45.2852%" y="207.50"></text></g><g><title>alloc::vec::from_elem (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="357" width="0.3441%" height="15" fill="rgb(218,36,50)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="367.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="341" width="0.3441%" height="15" fill="rgb(226,80,48)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="325" width="0.3441%" height="15" fill="rgb(238,224,15)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="309" width="0.3441%" height="15" fill="rgb(241,136,10)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="293" width="0.3441%" height="15" fill="rgb(208,32,45)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="277" width="0.3441%" height="15" fill="rgb(207,135,9)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="261" width="0.3441%" height="15" fill="rgb(206,86,44)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="245" width="0.3441%" height="15" fill="rgb(245,177,15)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="255.50"></text></g><g><title>__rdl_alloc_zeroed (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="229" width="0.3441%" height="15" fill="rgb(206,64,50)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (2,988,511,930 samples, 0.34%)</title><rect x="45.0347%" y="213" width="0.3441%" height="15" fill="rgb(234,36,40)" fg:x="391115927943" fg:w="2988511930"/><text x="45.2847%" y="223.50"></text></g><g><title>__libc_calloc (198,542,178 samples, 0.02%)</title><rect x="45.3560%" y="197" width="0.0229%" height="15" fill="rgb(213,64,8)" fg:x="393905897695" fg:w="198542178"/><text x="45.6060%" y="207.50"></text></g><g><title>[libc.so.6] (152,179,288 samples, 0.02%)</title><rect x="45.3613%" y="181" width="0.0175%" height="15" fill="rgb(210,75,36)" fg:x="393952260585" fg:w="152179288"/><text x="45.6113%" y="191.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Seek&gt;::seek (86,893,204 samples, 0.01%)</title><rect x="45.3788%" y="341" width="0.0100%" height="15" fill="rgb(229,88,21)" fg:x="394104439873" fg:w="86893204"/><text x="45.6288%" y="351.50"></text></g><g><title>&lt;std::fs::File as std::io::Seek&gt;::seek (86,893,204 samples, 0.01%)</title><rect x="45.3788%" y="325" width="0.0100%" height="15" fill="rgb(252,204,47)" fg:x="394104439873" fg:w="86893204"/><text x="45.6288%" y="335.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (86,893,204 samples, 0.01%)</title><rect x="45.3788%" y="309" width="0.0100%" height="15" fill="rgb(208,77,27)" fg:x="394104439873" fg:w="86893204"/><text x="45.6288%" y="319.50"></text></g><g><title>std::sys::pal::unix::fs::File::seek (86,893,204 samples, 0.01%)</title><rect x="45.3788%" y="293" width="0.0100%" height="15" fill="rgb(221,76,26)" fg:x="394104439873" fg:w="86893204"/><text x="45.6288%" y="303.50"></text></g><g><title>llseek (86,893,204 samples, 0.01%)</title><rect x="45.3788%" y="277" width="0.0100%" height="15" fill="rgb(225,139,18)" fg:x="394104439873" fg:w="86893204"/><text x="45.6288%" y="287.50"></text></g><g><title>[libc.so.6] (1,676,731,981 samples, 0.19%)</title><rect x="45.3898%" y="165" width="0.1931%" height="15" fill="rgb(230,137,11)" fg:x="394199810419" fg:w="1676731981"/><text x="45.6398%" y="175.50"></text></g><g><title>alloc::vec::from_elem (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="325" width="0.2076%" height="15" fill="rgb(212,28,1)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="335.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="309" width="0.2076%" height="15" fill="rgb(248,164,17)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="293" width="0.2076%" height="15" fill="rgb(222,171,42)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="277" width="0.2076%" height="15" fill="rgb(243,84,45)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="261" width="0.2076%" height="15" fill="rgb(252,49,23)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="245" width="0.2076%" height="15" fill="rgb(215,19,7)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="255.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="229" width="0.2076%" height="15" fill="rgb(238,81,41)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="239.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="213" width="0.2076%" height="15" fill="rgb(210,199,37)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="223.50"></text></g><g><title>__rdl_alloc_zeroed (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="197" width="0.2076%" height="15" fill="rgb(244,192,49)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="207.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1,802,745,459 samples, 0.21%)</title><rect x="45.3894%" y="181" width="0.2076%" height="15" fill="rgb(226,211,11)" fg:x="394196688136" fg:w="1802745459"/><text x="45.6394%" y="191.50"></text></g><g><title>__libc_calloc (122,891,195 samples, 0.01%)</title><rect x="45.5829%" y="165" width="0.0142%" height="15" fill="rgb(236,162,54)" fg:x="395876542400" fg:w="122891195"/><text x="45.8329%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2,058,698,129 samples, 0.24%)</title><rect x="45.6011%" y="325" width="0.2370%" height="15" fill="rgb(220,229,9)" fg:x="396035064085" fg:w="2058698129"/><text x="45.8511%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2,058,698,129 samples, 0.24%)</title><rect x="45.6011%" y="309" width="0.2370%" height="15" fill="rgb(250,87,22)" fg:x="396035064085" fg:w="2058698129"/><text x="45.8511%" y="319.50"></text></g><g><title>[libc.so.6] (2,058,698,129 samples, 0.24%)</title><rect x="45.6011%" y="293" width="0.2370%" height="15" fill="rgb(239,43,17)" fg:x="396035064085" fg:w="2058698129"/><text x="45.8511%" y="303.50"></text></g><g><title>[libc.so.6] (1,310,512,719 samples, 0.15%)</title><rect x="45.8382%" y="149" width="0.1509%" height="15" fill="rgb(231,177,25)" fg:x="398093762214" fg:w="1310512719"/><text x="46.0882%" y="159.50"></text></g><g><title>alloc::vec::from_elem (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="309" width="0.1562%" height="15" fill="rgb(219,179,1)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="319.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="293" width="0.1562%" height="15" fill="rgb(238,219,53)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="277" width="0.1562%" height="15" fill="rgb(232,167,36)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="261" width="0.1562%" height="15" fill="rgb(244,19,51)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="245" width="0.1562%" height="15" fill="rgb(224,6,22)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="229" width="0.1562%" height="15" fill="rgb(224,145,5)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="239.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="213" width="0.1562%" height="15" fill="rgb(234,130,49)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="223.50"></text></g><g><title>alloc::alloc::alloc_zeroed (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="197" width="0.1562%" height="15" fill="rgb(254,6,2)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="207.50"></text></g><g><title>__rdl_alloc_zeroed (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="181" width="0.1562%" height="15" fill="rgb(208,96,46)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="191.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (1,356,922,590 samples, 0.16%)</title><rect x="45.8382%" y="165" width="0.1562%" height="15" fill="rgb(239,3,39)" fg:x="398093762214" fg:w="1356922590"/><text x="46.0882%" y="175.50"></text></g><g><title>infinite_rs::module::kraken::decompress (1,366,800,409 samples, 0.16%)</title><rect x="45.8382%" y="325" width="0.1574%" height="15" fill="rgb(233,210,1)" fg:x="398093762214" fg:w="1366800409"/><text x="46.0882%" y="335.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::read_multiple_blocks (5,392,618,151 samples, 0.62%)</title><rect x="45.3788%" y="357" width="0.6209%" height="15" fill="rgb(244,137,37)" fg:x="394104439873" fg:w="5392618151"/><text x="45.6288%" y="367.50"></text></g><g><title>infinite_rs::module::file::read_compressed_block (5,300,369,888 samples, 0.61%)</title><rect x="45.3894%" y="341" width="0.6103%" height="15" fill="rgb(240,136,2)" fg:x="394196688136" fg:w="5300369888"/><text x="45.6394%" y="351.50"></text></g><g><title>[libc.so.6] (424,123,265 samples, 0.05%)</title><rect x="46.0045%" y="181" width="0.0488%" height="15" fill="rgb(239,18,37)" fg:x="399538095814" fg:w="424123265"/><text x="46.2545%" y="191.50"></text></g><g><title>alloc::vec::from_elem (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="341" width="0.0500%" height="15" fill="rgb(218,185,22)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="351.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="325" width="0.0500%" height="15" fill="rgb(225,218,4)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="309" width="0.0500%" height="15" fill="rgb(230,182,32)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="293" width="0.0500%" height="15" fill="rgb(242,56,43)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="277" width="0.0500%" height="15" fill="rgb(233,99,24)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="261" width="0.0500%" height="15" fill="rgb(234,209,42)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="271.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="245" width="0.0500%" height="15" fill="rgb(227,7,12)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="255.50"></text></g><g><title>alloc::alloc::alloc_zeroed (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="229" width="0.0500%" height="15" fill="rgb(245,203,43)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="239.50"></text></g><g><title>__rdl_alloc_zeroed (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="213" width="0.0500%" height="15" fill="rgb(238,205,33)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="223.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (434,602,895 samples, 0.05%)</title><rect x="46.0045%" y="197" width="0.0500%" height="15" fill="rgb(231,56,7)" fg:x="399538095814" fg:w="434602895"/><text x="46.2545%" y="207.50"></text></g><g><title>infinite_rs::module::file::read_single_block (500,338,477 samples, 0.06%)</title><rect x="45.9997%" y="357" width="0.0576%" height="15" fill="rgb(244,186,29)" fg:x="399497058024" fg:w="500338477"/><text x="46.2497%" y="367.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::read_tag (8,940,112,043 samples, 1.03%)</title><rect x="45.0328%" y="373" width="1.0294%" height="15" fill="rgb(234,111,31)" fg:x="391099305723" fg:w="8940112043"/><text x="45.2828%" y="383.50"></text></g><g><title>[libc.so.6] (265,642,615 samples, 0.03%)</title><rect x="46.0626%" y="197" width="0.0306%" height="15" fill="rgb(241,149,10)" fg:x="400042850204" fg:w="265642615"/><text x="46.3126%" y="207.50"></text></g><g><title>infinite_rs::module::kraken::decompress (289,860,493 samples, 0.03%)</title><rect x="46.0622%" y="373" width="0.0334%" height="15" fill="rgb(249,206,44)" fg:x="400039417766" fg:w="289860493"/><text x="46.3122%" y="383.50"></text></g><g><title>alloc::vec::from_elem (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="357" width="0.0330%" height="15" fill="rgb(251,153,30)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="367.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="341" width="0.0330%" height="15" fill="rgb(239,152,38)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="325" width="0.0330%" height="15" fill="rgb(249,139,47)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="309" width="0.0330%" height="15" fill="rgb(244,64,35)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="293" width="0.0330%" height="15" fill="rgb(216,46,15)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="277" width="0.0330%" height="15" fill="rgb(250,74,19)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="261" width="0.0330%" height="15" fill="rgb(249,42,33)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="271.50"></text></g><g><title>alloc::alloc::alloc_zeroed (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="245" width="0.0330%" height="15" fill="rgb(242,149,17)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="255.50"></text></g><g><title>__rdl_alloc_zeroed (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="229" width="0.0330%" height="15" fill="rgb(244,29,21)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="239.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (286,428,055 samples, 0.03%)</title><rect x="46.0626%" y="213" width="0.0330%" height="15" fill="rgb(220,130,37)" fg:x="400042850204" fg:w="286428055"/><text x="46.3126%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::_{{closure}} (188,984,243 samples, 0.02%)</title><rect x="46.0983%" y="261" width="0.0218%" height="15" fill="rgb(211,67,2)" fg:x="400352671336" fg:w="188984243"/><text x="46.3483%" y="271.50"></text></g><g><title>infinite_rs::module::loader::ModuleFile::get_tag_path (752,773,226 samples, 0.09%)</title><rect x="46.0956%" y="373" width="0.0867%" height="15" fill="rgb(235,68,52)" fg:x="400329278259" fg:w="752773226"/><text x="46.3456%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (733,615,015 samples, 0.08%)</title><rect x="46.0978%" y="357" width="0.0845%" height="15" fill="rgb(246,142,3)" fg:x="400348436470" fg:w="733615015"/><text x="46.3478%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (729,380,149 samples, 0.08%)</title><rect x="46.0983%" y="341" width="0.0840%" height="15" fill="rgb(241,25,7)" fg:x="400352671336" fg:w="729380149"/><text x="46.3483%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::take_while::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (729,380,149 samples, 0.08%)</title><rect x="46.0983%" y="325" width="0.0840%" height="15" fill="rgb(242,119,39)" fg:x="400352671336" fg:w="729380149"/><text x="46.3483%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (729,380,149 samples, 0.08%)</title><rect x="46.0983%" y="309" width="0.0840%" height="15" fill="rgb(241,98,45)" fg:x="400352671336" fg:w="729380149"/><text x="46.3483%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (729,380,149 samples, 0.08%)</title><rect x="46.0983%" y="293" width="0.0840%" height="15" fill="rgb(254,28,30)" fg:x="400352671336" fg:w="729380149"/><text x="46.3483%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::_{{closure}} (729,380,149 samples, 0.08%)</title><rect x="46.0983%" y="277" width="0.0840%" height="15" fill="rgb(241,142,54)" fg:x="400352671336" fg:w="729380149"/><text x="46.3483%" y="287.50"></text></g><g><title>infinite_rs::module::loader::ModuleFile::get_tag_path::_{{closure}} (540,395,906 samples, 0.06%)</title><rect x="46.1200%" y="261" width="0.0622%" height="15" fill="rgb(222,85,15)" fg:x="400541655579" fg:w="540395906"/><text x="46.3700%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (540,395,906 samples, 0.06%)</title><rect x="46.1200%" y="245" width="0.0622%" height="15" fill="rgb(210,85,47)" fg:x="400541655579" fg:w="540395906"/><text x="46.3700%" y="255.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (540,395,906 samples, 0.06%)</title><rect x="46.1200%" y="229" width="0.0622%" height="15" fill="rgb(224,206,25)" fg:x="400541655579" fg:w="540395906"/><text x="46.3700%" y="239.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (540,395,906 samples, 0.06%)</title><rect x="46.1200%" y="213" width="0.0622%" height="15" fill="rgb(243,201,19)" fg:x="400541655579" fg:w="540395906"/><text x="46.3700%" y="223.50"></text></g><g><title>infinite_rs::module::loader::ModuleFile::read_tag (150,666,438 samples, 0.02%)</title><rect x="46.1822%" y="373" width="0.0173%" height="15" fill="rgb(236,59,4)" fg:x="401082051485" fg:w="150666438"/><text x="46.4322%" y="383.50"></text></g><g><title>infinite_rs::tag::loader::TagFile::read (87,843,746 samples, 0.01%)</title><rect x="46.2017%" y="373" width="0.0101%" height="15" fill="rgb(254,179,45)" fg:x="401251166918" fg:w="87843746"/><text x="46.4517%" y="383.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,522,505,490 samples, 0.18%)</title><rect x="46.2196%" y="341" width="0.1753%" height="15" fill="rgb(226,14,10)" fg:x="401406043381" fg:w="1522505490"/><text x="46.4696%" y="351.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (1,471,598,691 samples, 0.17%)</title><rect x="46.2254%" y="325" width="0.1694%" height="15" fill="rgb(244,27,41)" fg:x="401456950180" fg:w="1471598691"/><text x="46.4754%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (28,393,385,203 samples, 3.27%)</title><rect x="46.2196%" y="357" width="3.2693%" height="15" fill="rgb(235,35,32)" fg:x="401406043381" fg:w="28393385203"/><text x="46.4696%" y="367.50">&lt;co..</text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks::_{{closure}} (26,870,879,713 samples, 3.09%)</title><rect x="46.3949%" y="341" width="3.0940%" height="15" fill="rgb(218,68,31)" fg:x="402928548871" fg:w="26870879713"/><text x="46.6449%" y="351.50">inf..</text></g><g><title>&lt;ekur::definitions::render_model::VertexBufferIndex as infinite_rs::module::file::TagStructure&gt;::read (145,663,085 samples, 0.02%)</title><rect x="49.5033%" y="325" width="0.0168%" height="15" fill="rgb(207,120,37)" fg:x="429924547530" fg:w="145663085"/><text x="49.7533%" y="335.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldShortInteger::read (143,720,893 samples, 0.02%)</title><rect x="49.5035%" y="309" width="0.0165%" height="15" fill="rgb(227,98,0)" fg:x="429926489722" fg:w="143720893"/><text x="49.7535%" y="319.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_i16 (143,720,893 samples, 0.02%)</title><rect x="49.5035%" y="293" width="0.0165%" height="15" fill="rgb(207,7,3)" fg:x="429926489722" fg:w="143720893"/><text x="49.7535%" y="303.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldArray&lt;T&gt;::read (154,130,352 samples, 0.02%)</title><rect x="49.5033%" y="341" width="0.0177%" height="15" fill="rgb(206,98,19)" fg:x="429924547530" fg:w="154130352"/><text x="49.7533%" y="351.50"></text></g><g><title>&lt;ekur::definitions::render_model::SectionLods as infinite_rs::module::file::TagStructure&gt;::read (163,131,100 samples, 0.02%)</title><rect x="49.5027%" y="357" width="0.0188%" height="15" fill="rgb(217,5,26)" fg:x="429919537451" fg:w="163131100"/><text x="49.7527%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (158,118,683 samples, 0.02%)</title><rect x="49.5373%" y="357" width="0.0182%" height="15" fill="rgb(235,190,38)" fg:x="430220281184" fg:w="158118683"/><text x="49.7873%" y="367.50"></text></g><g><title>core::ptr::write (113,555,275 samples, 0.01%)</title><rect x="49.5425%" y="341" width="0.0131%" height="15" fill="rgb(247,86,24)" fg:x="430264844592" fg:w="113555275"/><text x="49.7925%" y="351.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks (78,316,793,449 samples, 9.02%)</title><rect x="46.2118%" y="373" width="9.0177%" height="15" fill="rgb(205,101,16)" fg:x="401339010664" fg:w="78316793449"/><text x="46.4618%" y="383.50">infinite_rs::..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (49,273,181,414 samples, 5.67%)</title><rect x="49.5560%" y="357" width="5.6735%" height="15" fill="rgb(246,168,33)" fg:x="430382622699" fg:w="49273181414"/><text x="49.8060%" y="367.50">core::i..</text></g><g><title>&lt;u32 as core::iter::traits::accum::Sum&gt;::sum (49,273,181,414 samples, 5.67%)</title><rect x="49.5560%" y="341" width="5.6735%" height="15" fill="rgb(231,114,1)" fg:x="430382622699" fg:w="49273181414"/><text x="49.8060%" y="351.50">&lt;u32 as..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49,273,181,414 samples, 5.67%)</title><rect x="49.5560%" y="325" width="5.6735%" height="15" fill="rgb(207,184,53)" fg:x="430382622699" fg:w="49273181414"/><text x="49.8060%" y="335.50">&lt;core::..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49,273,181,414 samples, 5.67%)</title><rect x="49.5560%" y="309" width="5.6735%" height="15" fill="rgb(224,95,51)" fg:x="430382622699" fg:w="49273181414"/><text x="49.8060%" y="319.50">&lt;core::..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (49,273,181,414 samples, 5.67%)</title><rect x="49.5560%" y="293" width="5.6735%" height="15" fill="rgb(212,188,45)" fg:x="430382622699" fg:w="49273181414"/><text x="49.8060%" y="303.50">&lt;core::..</text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (45,811,878,271 samples, 5.27%)</title><rect x="49.9546%" y="277" width="5.2750%" height="15" fill="rgb(223,154,38)" fg:x="433843925842" fg:w="45811878271"/><text x="50.2046%" y="287.50">core::..</text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks::_{{closure}} (14,655,122,194 samples, 1.69%)</title><rect x="53.5421%" y="261" width="1.6875%" height="15" fill="rgb(251,22,52)" fg:x="465000681919" fg:w="14655122194"/><text x="53.7921%" y="271.50"></text></g><g><title>&lt;infinite_rs::tag::datablock::TagSectionType as core::cmp::PartialEq&gt;::eq (14,655,122,194 samples, 1.69%)</title><rect x="53.5421%" y="245" width="1.6875%" height="15" fill="rgb(229,209,22)" fg:x="465000681919" fg:w="14655122194"/><text x="53.7921%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="357" width="0.0115%" height="15" fill="rgb(234,138,34)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="367.50"></text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="341" width="0.0115%" height="15" fill="rgb(212,95,11)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="325" width="0.0115%" height="15" fill="rgb(240,179,47)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="335.50"></text></g><g><title>core::cmp::min (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="309" width="0.0115%" height="15" fill="rgb(240,163,11)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="319.50"></text></g><g><title>core::cmp::Ord::min (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="293" width="0.0115%" height="15" fill="rgb(236,37,12)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="303.50"></text></g><g><title>core::cmp::min_by (100,068,835 samples, 0.01%)</title><rect x="55.3128%" y="277" width="0.0115%" height="15" fill="rgb(232,164,16)" fg:x="480378556609" fg:w="100068835"/><text x="55.5628%" y="287.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (145,918,152 samples, 0.02%)</title><rect x="55.3243%" y="357" width="0.0168%" height="15" fill="rgb(244,205,15)" fg:x="480478625444" fg:w="145918152"/><text x="55.5743%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (306,267,656 samples, 0.04%)</title><rect x="55.3411%" y="357" width="0.0353%" height="15" fill="rgb(223,117,47)" fg:x="480624543596" fg:w="306267656"/><text x="55.5911%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (306,267,656 samples, 0.04%)</title><rect x="55.3411%" y="341" width="0.0353%" height="15" fill="rgb(244,107,35)" fg:x="480624543596" fg:w="306267656"/><text x="55.5911%" y="351.50"></text></g><g><title>[libc.so.6] (203,609,533 samples, 0.02%)</title><rect x="55.3529%" y="325" width="0.0234%" height="15" fill="rgb(205,140,8)" fg:x="480727201719" fg:w="203609533"/><text x="55.6029%" y="335.50"></text></g><g><title>png::filter::filter_internal (2,101,443,015 samples, 0.24%)</title><rect x="55.2493%" y="373" width="0.2420%" height="15" fill="rgb(228,84,46)" fg:x="479827157099" fg:w="2101443015"/><text x="55.4993%" y="383.50"></text></g><g><title>png::filter::filter_paeth_fpnge (997,788,862 samples, 0.11%)</title><rect x="55.3764%" y="357" width="0.1149%" height="15" fill="rgb(254,188,9)" fg:x="480930811252" fg:w="997788862"/><text x="55.6264%" y="367.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (476,597,137 samples, 0.05%)</title><rect x="55.5385%" y="309" width="0.0549%" height="15" fill="rgb(206,112,54)" fg:x="482338714197" fg:w="476597137"/><text x="55.7885%" y="319.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_maddubs_epi16 (162,751,773 samples, 0.02%)</title><rect x="55.5934%" y="309" width="0.0187%" height="15" fill="rgb(216,84,49)" fg:x="482815311334" fg:w="162751773"/><text x="55.8434%" y="319.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_sad_epu8 (1,487,438,774 samples, 0.17%)</title><rect x="55.6121%" y="309" width="0.1713%" height="15" fill="rgb(214,194,35)" fg:x="482978063107" fg:w="1487438774"/><text x="55.8621%" y="319.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_loadu_si256 (3,290,220,921 samples, 0.38%)</title><rect x="55.7834%" y="309" width="0.3788%" height="15" fill="rgb(249,28,3)" fg:x="484465501881" fg:w="3290220921"/><text x="56.0334%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,290,220,921 samples, 0.38%)</title><rect x="55.7834%" y="293" width="0.3788%" height="15" fill="rgb(222,56,52)" fg:x="484465501881" fg:w="3290220921"/><text x="56.0334%" y="303.50"></text></g><g><title>simd_adler32::imp::avx2::imp::update_block (5,842,919,475 samples, 0.67%)</title><rect x="55.4974%" y="341" width="0.6728%" height="15" fill="rgb(245,217,50)" fg:x="481981577284" fg:w="5842919475"/><text x="55.7474%" y="351.50"></text></g><g><title>simd_adler32::imp::avx2::imp::reduce_add_blocks (5,547,966,891 samples, 0.64%)</title><rect x="55.5313%" y="325" width="0.6388%" height="15" fill="rgb(213,201,24)" fg:x="482276529868" fg:w="5547966891"/><text x="55.7813%" y="335.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (186,230,389 samples, 0.02%)</title><rect x="56.1739%" y="309" width="0.0214%" height="15" fill="rgb(248,116,28)" fg:x="487856857762" fg:w="186230389"/><text x="56.4239%" y="319.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (475,327,530 samples, 0.05%)</title><rect x="56.1953%" y="309" width="0.0547%" height="15" fill="rgb(219,72,43)" fg:x="488043088151" fg:w="475327530"/><text x="56.4453%" y="319.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_sad_epu8 (545,155,228 samples, 0.06%)</title><rect x="56.2511%" y="309" width="0.0628%" height="15" fill="rgb(209,138,14)" fg:x="488527255184" fg:w="545155228"/><text x="56.5011%" y="319.50"></text></g><g><title>[unknown] (360,861,016,753 samples, 41.55%)</title><rect x="14.7668%" y="389" width="41.5510%" height="15" fill="rgb(222,18,33)" fg:x="128246330287" fg:w="360861016753"/><text x="15.0168%" y="399.50">[unknown]</text></g><g><title>simd_adler32::imp::avx2::imp::update (7,175,173,180 samples, 0.83%)</title><rect x="55.4917%" y="373" width="0.8262%" height="15" fill="rgb(213,199,7)" fg:x="481932173860" fg:w="7175173180"/><text x="55.7417%" y="383.50"></text></g><g><title>simd_adler32::imp::avx2::imp::update_imp (7,144,036,241 samples, 0.82%)</title><rect x="55.4953%" y="357" width="0.8226%" height="15" fill="rgb(250,110,10)" fg:x="481963310799" fg:w="7144036241"/><text x="55.7453%" y="367.50"></text></g><g><title>simd_adler32::imp::avx2::imp::update_chunk_block (1,282,850,281 samples, 0.15%)</title><rect x="56.1701%" y="341" width="0.1477%" height="15" fill="rgb(248,123,6)" fg:x="487824496759" fg:w="1282850281"/><text x="56.4201%" y="351.50"></text></g><g><title>simd_adler32::imp::avx2::imp::reduce_add_blocks (1,263,942,103 samples, 0.15%)</title><rect x="56.1723%" y="325" width="0.1455%" height="15" fill="rgb(206,91,31)" fg:x="487843404937" fg:w="1263942103"/><text x="56.4223%" y="335.50"></text></g><g><title>__rdl_realloc (1,756,358,781 samples, 0.20%)</title><rect x="56.3408%" y="325" width="0.2022%" height="15" fill="rgb(211,154,13)" fg:x="489306476533" fg:w="1756358781"/><text x="56.5908%" y="335.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (1,756,358,781 samples, 0.20%)</title><rect x="56.3408%" y="309" width="0.2022%" height="15" fill="rgb(225,148,7)" fg:x="489306476533" fg:w="1756358781"/><text x="56.5908%" y="319.50"></text></g><g><title>realloc (1,756,358,781 samples, 0.20%)</title><rect x="56.3408%" y="293" width="0.2022%" height="15" fill="rgb(220,160,43)" fg:x="489306476533" fg:w="1756358781"/><text x="56.5908%" y="303.50"></text></g><g><title>[libc.so.6] (1,723,734,061 samples, 0.20%)</title><rect x="56.3445%" y="277" width="0.1985%" height="15" fill="rgb(213,52,39)" fg:x="489339101253" fg:w="1723734061"/><text x="56.5945%" y="287.50"></text></g><g><title>[libc.so.6] (1,657,859,062 samples, 0.19%)</title><rect x="56.3521%" y="261" width="0.1909%" height="15" fill="rgb(243,137,7)" fg:x="489404976252" fg:w="1657859062"/><text x="56.6021%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1,862,402,331 samples, 0.21%)</title><rect x="56.3407%" y="373" width="0.2144%" height="15" fill="rgb(230,79,13)" fg:x="489305841069" fg:w="1862402331"/><text x="56.5907%" y="383.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1,862,402,331 samples, 0.21%)</title><rect x="56.3407%" y="357" width="0.2144%" height="15" fill="rgb(247,105,23)" fg:x="489305841069" fg:w="1862402331"/><text x="56.5907%" y="367.50"></text></g><g><title>alloc::alloc::realloc (1,862,402,331 samples, 0.21%)</title><rect x="56.3407%" y="341" width="0.2144%" height="15" fill="rgb(223,179,41)" fg:x="489305841069" fg:w="1862402331"/><text x="56.5907%" y="351.50"></text></g><g><title>realloc (105,408,086 samples, 0.01%)</title><rect x="56.5430%" y="325" width="0.0121%" height="15" fill="rgb(218,9,34)" fg:x="491062835314" fg:w="105408086"/><text x="56.7930%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (2,176,202,068 samples, 0.25%)</title><rect x="56.3327%" y="389" width="0.2506%" height="15" fill="rgb(222,106,8)" fg:x="489236416513" fg:w="2176202068"/><text x="56.5827%" y="399.50"></text></g><g><title>malloc (219,459,134 samples, 0.03%)</title><rect x="56.5580%" y="373" width="0.0253%" height="15" fill="rgb(211,220,0)" fg:x="491193159447" fg:w="219459134"/><text x="56.8080%" y="383.50"></text></g><g><title>[libc.so.6] (142,509,961 samples, 0.02%)</title><rect x="56.5669%" y="357" width="0.0164%" height="15" fill="rgb(229,52,16)" fg:x="491270108620" fg:w="142509961"/><text x="56.8169%" y="367.50"></text></g><g><title>bcdec_rs::bc4_block (552,644,226 samples, 0.06%)</title><rect x="56.5876%" y="389" width="0.0636%" height="15" fill="rgb(212,155,18)" fg:x="491449845360" fg:w="552644226"/><text x="56.8376%" y="399.50"></text></g><g><title>bcdec_rs::Bitstream::read_bit (198,755,028 samples, 0.02%)</title><rect x="56.8649%" y="373" width="0.0229%" height="15" fill="rgb(242,21,14)" fg:x="493858345040" fg:w="198755028"/><text x="57.1149%" y="383.50"></text></g><g><title>bcdec_rs::Bitstream::read_bits (198,755,028 samples, 0.02%)</title><rect x="56.8649%" y="357" width="0.0229%" height="15" fill="rgb(222,19,48)" fg:x="493858345040" fg:w="198755028"/><text x="57.1149%" y="367.50"></text></g><g><title>bcdec_rs::Bitstream::read_bits (128,905,976 samples, 0.01%)</title><rect x="56.8878%" y="373" width="0.0148%" height="15" fill="rgb(232,45,27)" fg:x="494057100068" fg:w="128905976"/><text x="57.1378%" y="383.50"></text></g><g><title>bcdec_rs::bc7 (2,347,944,811 samples, 0.27%)</title><rect x="56.6512%" y="389" width="0.2704%" height="15" fill="rgb(249,103,42)" fg:x="492002489586" fg:w="2347944811"/><text x="56.9012%" y="399.50"></text></g><g><title>bcdec_rs::interpolate (164,428,353 samples, 0.02%)</title><rect x="56.9026%" y="373" width="0.0189%" height="15" fill="rgb(246,81,33)" fg:x="494186006044" fg:w="164428353"/><text x="57.1526%" y="383.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (111,431,966 samples, 0.01%)</title><rect x="57.3014%" y="373" width="0.0128%" height="15" fill="rgb(252,33,42)" fg:x="497649540536" fg:w="111431966"/><text x="57.5514%" y="383.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (111,431,966 samples, 0.01%)</title><rect x="57.3014%" y="357" width="0.0128%" height="15" fill="rgb(209,212,41)" fg:x="497649540536" fg:w="111431966"/><text x="57.5514%" y="367.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (111,431,966 samples, 0.01%)</title><rect x="57.3014%" y="341" width="0.0128%" height="15" fill="rgb(207,154,6)" fg:x="497649540536" fg:w="111431966"/><text x="57.5514%" y="351.50"></text></g><g><title>bcdec_rs::color_block (52,248,106,776 samples, 6.02%)</title><rect x="56.9216%" y="389" width="6.0161%" height="15" fill="rgb(223,64,47)" fg:x="494350434397" fg:w="52248106776"/><text x="57.1716%" y="399.50">bcdec_rs..</text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (48,837,568,671 samples, 5.62%)</title><rect x="57.3143%" y="373" width="5.6234%" height="15" fill="rgb(211,161,38)" fg:x="497760972502" fg:w="48837568671"/><text x="57.5643%" y="383.50">core::s..</text></g><g><title>core::intrinsics::copy_nonoverlapping (48,837,568,671 samples, 5.62%)</title><rect x="57.3143%" y="357" width="5.6234%" height="15" fill="rgb(219,138,40)" fg:x="497760972502" fg:w="48837568671"/><text x="57.5643%" y="367.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (89,564,497 samples, 0.01%)</title><rect x="62.9539%" y="261" width="0.0103%" height="15" fill="rgb(241,228,46)" fg:x="546740359159" fg:w="89564497"/><text x="63.2039%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ekur::definitions::material::MaterialPostProcessTexture]&gt; (89,564,497 samples, 0.01%)</title><rect x="62.9539%" y="245" width="0.0103%" height="15" fill="rgb(223,209,38)" fg:x="546740359159" fg:w="89564497"/><text x="63.2039%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (165,128,875 samples, 0.02%)</title><rect x="62.9469%" y="341" width="0.0190%" height="15" fill="rgb(236,164,45)" fg:x="546678987716" fg:w="165128875"/><text x="63.1969%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ekur::definitions::material::MaterialPostProcessing]&gt; (165,128,875 samples, 0.02%)</title><rect x="62.9469%" y="325" width="0.0190%" height="15" fill="rgb(231,15,5)" fg:x="546678987716" fg:w="165128875"/><text x="63.1969%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::material::MaterialPostProcessing&gt; (160,399,130 samples, 0.02%)</title><rect x="62.9474%" y="309" width="0.0185%" height="15" fill="rgb(252,35,15)" fg:x="546683717461" fg:w="160399130"/><text x="63.1974%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::types::common_types::FieldBlock&lt;ekur::definitions::material::MaterialPostProcessTexture&gt;&gt; (113,178,310 samples, 0.01%)</title><rect x="62.9529%" y="293" width="0.0130%" height="15" fill="rgb(248,181,18)" fg:x="546730938281" fg:w="113178310"/><text x="63.2029%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ekur::definitions::material::MaterialPostProcessTexture&gt;&gt; (113,178,310 samples, 0.01%)</title><rect x="62.9529%" y="277" width="0.0130%" height="15" fill="rgb(233,39,42)" fg:x="546730938281" fg:w="113178310"/><text x="63.2029%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::types::common_types::FieldBlock&lt;ekur::definitions::material::MaterialPostProcessing&gt;&gt; (259,624,023 samples, 0.03%)</title><rect x="62.9469%" y="373" width="0.0299%" height="15" fill="rgb(238,110,33)" fg:x="546678987716" fg:w="259624023"/><text x="63.1969%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ekur::definitions::material::MaterialPostProcessing&gt;&gt; (259,624,023 samples, 0.03%)</title><rect x="62.9469%" y="357" width="0.0299%" height="15" fill="rgb(233,195,10)" fg:x="546678987716" fg:w="259624023"/><text x="63.1969%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;ekur::definitions::material::MaterialPostProcessing&gt;&gt; (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="341" width="0.0109%" height="15" fill="rgb(254,105,3)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="351.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="325" width="0.0109%" height="15" fill="rgb(221,225,9)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="309" width="0.0109%" height="15" fill="rgb(224,227,45)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="293" width="0.0109%" height="15" fill="rgb(229,198,43)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="277" width="0.0109%" height="15" fill="rgb(206,209,35)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="287.50"></text></g><g><title>__rdl_dealloc (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="261" width="0.0109%" height="15" fill="rgb(245,195,53)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="271.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="245" width="0.0109%" height="15" fill="rgb(240,92,26)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="255.50"></text></g><g><title>cfree (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="229" width="0.0109%" height="15" fill="rgb(207,40,23)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="239.50"></text></g><g><title>[libc.so.6] (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="213" width="0.0109%" height="15" fill="rgb(223,111,35)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="223.50"></text></g><g><title>[libc.so.6] (94,495,148 samples, 0.01%)</title><rect x="62.9659%" y="197" width="0.0109%" height="15" fill="rgb(229,147,28)" fg:x="546844116591" fg:w="94495148"/><text x="63.2159%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::material::MaterialTag&gt; (278,520,551 samples, 0.03%)</title><rect x="62.9458%" y="389" width="0.0321%" height="15" fill="rgb(211,29,28)" fg:x="546669527943" fg:w="278520551"/><text x="63.1958%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (99,391,594 samples, 0.01%)</title><rect x="62.9796%" y="341" width="0.0114%" height="15" fill="rgb(228,72,33)" fg:x="546962968788" fg:w="99391594"/><text x="63.2296%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ekur::definitions::render_model::SectionBlock]&gt; (99,391,594 samples, 0.01%)</title><rect x="62.9796%" y="325" width="0.0114%" height="15" fill="rgb(205,214,31)" fg:x="546962968788" fg:w="99391594"/><text x="63.2296%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::render_model::SectionBlock&gt; (99,391,594 samples, 0.01%)</title><rect x="62.9796%" y="309" width="0.0114%" height="15" fill="rgb(224,111,15)" fg:x="546962968788" fg:w="99391594"/><text x="63.2296%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::types::common_types::FieldBlock&lt;ekur::definitions::render_model::SectionLods&gt;&gt; (99,391,594 samples, 0.01%)</title><rect x="62.9796%" y="293" width="0.0114%" height="15" fill="rgb(253,21,26)" fg:x="546962968788" fg:w="99391594"/><text x="63.2296%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ekur::definitions::render_model::SectionLods&gt;&gt; (99,391,594 samples, 0.01%)</title><rect x="62.9796%" y="277" width="0.0114%" height="15" fill="rgb(245,139,43)" fg:x="546962968788" fg:w="99391594"/><text x="63.2296%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::types::common_types::FieldBlock&lt;ekur::definitions::render_model::SectionBlock&gt;&gt; (119,238,851 samples, 0.01%)</title><rect x="62.9796%" y="373" width="0.0137%" height="15" fill="rgb(252,170,7)" fg:x="546962968788" fg:w="119238851"/><text x="63.2296%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ekur::definitions::render_model::SectionBlock&gt;&gt; (119,238,851 samples, 0.01%)</title><rect x="62.9796%" y="357" width="0.0137%" height="15" fill="rgb(231,118,14)" fg:x="546962968788" fg:w="119238851"/><text x="63.2296%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::runtime_geo::RuntimeGeo&gt; (139,148,429 samples, 0.02%)</title><rect x="62.9779%" y="389" width="0.0160%" height="15" fill="rgb(238,83,0)" fg:x="546948048494" fg:w="139148429"/><text x="63.2279%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="325" width="0.0102%" height="15" fill="rgb(221,39,39)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="335.50"></text></g><g><title>core::ptr::drop_in_place&lt;[infinite_rs::tag::dependency::TagDependency]&gt; (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="309" width="0.0102%" height="15" fill="rgb(222,119,46)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="319.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::dependency::TagDependency&gt; (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="293" width="0.0102%" height="15" fill="rgb(222,165,49)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="303.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="277" width="0.0102%" height="15" fill="rgb(219,113,52)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="261" width="0.0102%" height="15" fill="rgb(214,7,15)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="271.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="245" width="0.0102%" height="15" fill="rgb(235,32,4)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="255.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="229" width="0.0102%" height="15" fill="rgb(238,90,54)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::deallocate (88,599,850 samples, 0.01%)</title><rect x="63.0119%" y="213" width="0.0102%" height="15" fill="rgb(213,208,19)" fg:x="547243741632" fg:w="88599850"/><text x="63.2619%" y="223.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;infinite_rs::tag::dependency::TagDependency&gt;&gt; (144,932,733 samples, 0.02%)</title><rect x="63.0119%" y="341" width="0.0167%" height="15" fill="rgb(233,156,4)" fg:x="547243741632" fg:w="144932733"/><text x="63.2619%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;infinite_rs::tag::loader::TagFile&gt;&gt; (310,569,076 samples, 0.04%)</title><rect x="63.0017%" y="373" width="0.0358%" height="15" fill="rgb(207,194,5)" fg:x="547155037072" fg:w="310569076"/><text x="63.2517%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::loader::TagFile&gt; (305,981,119 samples, 0.04%)</title><rect x="63.0022%" y="357" width="0.0352%" height="15" fill="rgb(206,111,30)" fg:x="547159625029" fg:w="305981119"/><text x="63.2522%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::module::file::ModuleFileEntry&gt; (386,092,947 samples, 0.04%)</title><rect x="62.9979%" y="389" width="0.0445%" height="15" fill="rgb(243,70,54)" fg:x="547121943199" fg:w="386092947"/><text x="63.2479%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;infinite_rs::tag::types::common_types::FieldBlock&lt;ekur::definitions::scenario::BspGeometryInstanceBlock&gt;&gt; (109,921,022 samples, 0.01%)</title><rect x="63.0504%" y="389" width="0.0127%" height="15" fill="rgb(242,28,8)" fg:x="547577609753" fg:w="109921022"/><text x="63.3004%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;ekur::definitions::scenario::BspGeometryInstanceBlock&gt;&gt; (109,921,022 samples, 0.01%)</title><rect x="63.0504%" y="373" width="0.0127%" height="15" fill="rgb(219,106,18)" fg:x="547577609753" fg:w="109921022"/><text x="63.3004%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (109,921,022 samples, 0.01%)</title><rect x="63.0504%" y="357" width="0.0127%" height="15" fill="rgb(244,222,10)" fg:x="547577609753" fg:w="109921022"/><text x="63.3004%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;[ekur::definitions::scenario::BspGeometryInstanceBlock]&gt; (109,921,022 samples, 0.01%)</title><rect x="63.0504%" y="341" width="0.0127%" height="15" fill="rgb(236,179,52)" fg:x="547577609753" fg:w="109921022"/><text x="63.3004%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;ekur::definitions::scenario::BspGeometryInstanceBlock&gt; (109,921,022 samples, 0.01%)</title><rect x="63.0504%" y="325" width="0.0127%" height="15" fill="rgb(213,23,39)" fg:x="547577609753" fg:w="109921022"/><text x="63.3004%" y="335.50"></text></g><g><title>ekur::loader::module::get_tags (111,555,643 samples, 0.01%)</title><rect x="63.0836%" y="389" width="0.0128%" height="15" fill="rgb(238,48,10)" fg:x="547866048520" fg:w="111555643"/><text x="63.3336%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (104,851,579 samples, 0.01%)</title><rect x="63.1021%" y="261" width="0.0121%" height="15" fill="rgb(251,196,23)" fg:x="548026995337" fg:w="104851579"/><text x="63.3521%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (104,851,579 samples, 0.01%)</title><rect x="63.1021%" y="245" width="0.0121%" height="15" fill="rgb(250,152,24)" fg:x="548026995337" fg:w="104851579"/><text x="63.3521%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (191,873,298 samples, 0.02%)</title><rect x="63.0990%" y="293" width="0.0221%" height="15" fill="rgb(209,150,17)" fg:x="548000064279" fg:w="191873298"/><text x="63.3490%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (191,873,298 samples, 0.02%)</title><rect x="63.0990%" y="277" width="0.0221%" height="15" fill="rgb(234,202,34)" fg:x="548000064279" fg:w="191873298"/><text x="63.3490%" y="287.50"></text></g><g><title>ekur::materials::common_utils::collect_constants (258,038,057 samples, 0.03%)</title><rect x="63.0968%" y="373" width="0.0297%" height="15" fill="rgb(253,148,53)" fg:x="547980820301" fg:w="258038057"/><text x="63.3468%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (238,794,079 samples, 0.03%)</title><rect x="63.0990%" y="357" width="0.0275%" height="15" fill="rgb(218,129,16)" fg:x="548000064279" fg:w="238794079"/><text x="63.3490%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (238,794,079 samples, 0.03%)</title><rect x="63.0990%" y="341" width="0.0275%" height="15" fill="rgb(216,85,19)" fg:x="548000064279" fg:w="238794079"/><text x="63.3490%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (238,794,079 samples, 0.03%)</title><rect x="63.0990%" y="325" width="0.0275%" height="15" fill="rgb(235,228,7)" fg:x="548000064279" fg:w="238794079"/><text x="63.3490%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (238,794,079 samples, 0.03%)</title><rect x="63.0990%" y="309" width="0.0275%" height="15" fill="rgb(245,175,0)" fg:x="548000064279" fg:w="238794079"/><text x="63.3490%" y="319.50"></text></g><g><title>ekur::materials::process_material::process_materials (266,926,485 samples, 0.03%)</title><rect x="63.0964%" y="389" width="0.0307%" height="15" fill="rgb(208,168,36)" fg:x="547977604163" fg:w="266926485"/><text x="63.3464%" y="399.50"></text></g><g><title>[libc.so.6] (101,954,042 samples, 0.01%)</title><rect x="63.1452%" y="213" width="0.0117%" height="15" fill="rgb(246,171,24)" fg:x="548401601970" fg:w="101954042"/><text x="63.3952%" y="223.50"></text></g><g><title>alloc::vec::from_elem (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="373" width="0.0140%" height="15" fill="rgb(215,142,24)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="383.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="357" width="0.0140%" height="15" fill="rgb(250,187,7)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="341" width="0.0140%" height="15" fill="rgb(228,66,33)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="325" width="0.0140%" height="15" fill="rgb(234,215,21)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="309" width="0.0140%" height="15" fill="rgb(222,191,20)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="293" width="0.0140%" height="15" fill="rgb(245,79,54)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="277" width="0.0140%" height="15" fill="rgb(240,10,37)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="261" width="0.0140%" height="15" fill="rgb(214,192,32)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="271.50"></text></g><g><title>__rdl_alloc_zeroed (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="245" width="0.0140%" height="15" fill="rgb(209,36,54)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (121,996,525 samples, 0.01%)</title><rect x="63.1452%" y="229" width="0.0140%" height="15" fill="rgb(220,10,11)" fg:x="548401601970" fg:w="121996525"/><text x="63.3952%" y="239.50"></text></g><g><title>ekur::model::utils::get_resource_data (269,731,089 samples, 0.03%)</title><rect x="63.1445%" y="389" width="0.0311%" height="15" fill="rgb(221,106,17)" fg:x="548395069855" fg:w="269731089"/><text x="63.3945%" y="399.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (141,202,449 samples, 0.02%)</title><rect x="63.1593%" y="373" width="0.0163%" height="15" fill="rgb(251,142,44)" fg:x="548523598495" fg:w="141202449"/><text x="63.4093%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (141,202,449 samples, 0.02%)</title><rect x="63.1593%" y="357" width="0.0163%" height="15" fill="rgb(238,13,15)" fg:x="548523598495" fg:w="141202449"/><text x="63.4093%" y="367.50"></text></g><g><title>[libc.so.6] (141,202,449 samples, 0.02%)</title><rect x="63.1593%" y="341" width="0.0163%" height="15" fill="rgb(208,107,27)" fg:x="548523598495" fg:w="141202449"/><text x="63.4093%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (117,023,582 samples, 0.01%)</title><rect x="63.1901%" y="325" width="0.0135%" height="15" fill="rgb(205,136,37)" fg:x="548791060426" fg:w="117023582"/><text x="63.4401%" y="335.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (117,023,582 samples, 0.01%)</title><rect x="63.1901%" y="309" width="0.0135%" height="15" fill="rgb(250,205,27)" fg:x="548791060426" fg:w="117023582"/><text x="63.4401%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (117,023,582 samples, 0.01%)</title><rect x="63.1901%" y="293" width="0.0135%" height="15" fill="rgb(210,80,43)" fg:x="548791060426" fg:w="117023582"/><text x="63.4401%" y="303.50"></text></g><g><title>serde_json::ser::format_escaped_str (117,023,582 samples, 0.01%)</title><rect x="63.1901%" y="277" width="0.0135%" height="15" fill="rgb(247,160,36)" fg:x="548791060426" fg:w="117023582"/><text x="63.4401%" y="287.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (90,549,590 samples, 0.01%)</title><rect x="63.1931%" y="261" width="0.0104%" height="15" fill="rgb(234,13,49)" fg:x="548817534418" fg:w="90549590"/><text x="63.4431%" y="271.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (134,687,865 samples, 0.02%)</title><rect x="63.1884%" y="341" width="0.0155%" height="15" fill="rgb(234,122,0)" fg:x="548776416116" fg:w="134687865"/><text x="63.4384%" y="351.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (248,187,994 samples, 0.03%)</title><rect x="63.1860%" y="373" width="0.0286%" height="15" fill="rgb(207,146,38)" fg:x="548755778724" fg:w="248187994"/><text x="63.4360%" y="383.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (227,550,602 samples, 0.03%)</title><rect x="63.1884%" y="357" width="0.0262%" height="15" fill="rgb(207,177,25)" fg:x="548776416116" fg:w="227550602"/><text x="63.4384%" y="367.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (92,862,737 samples, 0.01%)</title><rect x="63.2039%" y="341" width="0.0107%" height="15" fill="rgb(211,178,42)" fg:x="548911103981" fg:w="92862737"/><text x="63.4539%" y="351.50"></text></g><g><title>ekur::serialize::common_coating::_::&lt;impl serde::ser::Serialize for ekur::serialize::common_coating::CommonLayer&gt;::serialize (301,365,204 samples, 0.03%)</title><rect x="63.1806%" y="389" width="0.0347%" height="15" fill="rgb(230,69,54)" fg:x="548708694785" fg:w="301365204"/><text x="63.4306%" y="399.50"></text></g><g><title>ekur::serialize::scenario_bsp::process_scenarios (120,395,897 samples, 0.01%)</title><rect x="63.2162%" y="389" width="0.0139%" height="15" fill="rgb(214,135,41)" fg:x="549017545015" fg:w="120395897"/><text x="63.4662%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (1,089,024,318 samples, 0.13%)</title><rect x="64.1274%" y="293" width="0.1254%" height="15" fill="rgb(237,67,25)" fg:x="556931132009" fg:w="1089024318"/><text x="64.3774%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (1,089,024,318 samples, 0.13%)</title><rect x="64.1274%" y="277" width="0.1254%" height="15" fill="rgb(222,189,50)" fg:x="556931132009" fg:w="1089024318"/><text x="64.3774%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (1,089,024,318 samples, 0.13%)</title><rect x="64.1274%" y="261" width="0.1254%" height="15" fill="rgb(245,148,34)" fg:x="556931132009" fg:w="1089024318"/><text x="64.3774%" y="271.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_run (8,922,501,370 samples, 1.03%)</title><rect x="63.2300%" y="389" width="1.0274%" height="15" fill="rgb(222,29,6)" fg:x="549137940912" fg:w="8922501370"/><text x="63.4800%" y="399.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_bits (8,563,074,545 samples, 0.99%)</title><rect x="63.2714%" y="373" width="0.9860%" height="15" fill="rgb(221,189,43)" fg:x="549497367737" fg:w="8563074545"/><text x="63.5214%" y="383.50"></text></g><g><title>std::io::Write::write_all (1,237,066,866 samples, 0.14%)</title><rect x="64.1149%" y="357" width="0.1424%" height="15" fill="rgb(207,36,27)" fg:x="556823375416" fg:w="1237066866"/><text x="64.3649%" y="367.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (1,237,066,866 samples, 0.14%)</title><rect x="64.1149%" y="341" width="0.1424%" height="15" fill="rgb(217,90,24)" fg:x="556823375416" fg:w="1237066866"/><text x="64.3649%" y="351.50"></text></g><g><title>std::io::cursor::vec_write (1,237,066,866 samples, 0.14%)</title><rect x="64.1149%" y="325" width="0.1424%" height="15" fill="rgb(224,66,35)" fg:x="556823375416" fg:w="1237066866"/><text x="64.3649%" y="335.50"></text></g><g><title>std::io::cursor::reserve_and_pad (1,237,066,866 samples, 0.14%)</title><rect x="64.1149%" y="309" width="0.1424%" height="15" fill="rgb(221,13,50)" fg:x="556823375416" fg:w="1237066866"/><text x="64.3649%" y="319.50"></text></g><g><title>infinite_rs::module::file::read_single_block (91,747,966 samples, 0.01%)</title><rect x="64.2774%" y="373" width="0.0106%" height="15" fill="rgb(236,68,49)" fg:x="558233892028" fg:w="91747966"/><text x="64.5274%" y="383.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (97,706,038 samples, 0.01%)</title><rect x="64.2971%" y="325" width="0.0113%" height="15" fill="rgb(229,146,28)" fg:x="558404905205" fg:w="97706038"/><text x="64.5471%" y="335.50"></text></g><g><title>&lt;infinite_rs::tag::datablock::TagDataBlock as infinite_rs::common::extensions::Enumerable&gt;::read (147,659,042 samples, 0.02%)</title><rect x="64.2966%" y="341" width="0.0170%" height="15" fill="rgb(225,31,38)" fg:x="558401237152" fg:w="147659042"/><text x="64.5466%" y="351.50"></text></g><g><title>&lt;byteorder::LittleEndian as byteorder::ByteOrder&gt;::read_u16 (183,687,314 samples, 0.02%)</title><rect x="64.3317%" y="309" width="0.0212%" height="15" fill="rgb(250,208,3)" fg:x="558705577967" fg:w="183687314"/><text x="64.5817%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (183,687,314 samples, 0.02%)</title><rect x="64.3317%" y="293" width="0.0212%" height="15" fill="rgb(246,54,23)" fg:x="558705577967" fg:w="183687314"/><text x="64.5817%" y="303.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (183,687,314 samples, 0.02%)</title><rect x="64.3317%" y="277" width="0.0212%" height="15" fill="rgb(243,76,11)" fg:x="558705577967" fg:w="183687314"/><text x="64.5817%" y="287.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (183,687,314 samples, 0.02%)</title><rect x="64.3317%" y="261" width="0.0212%" height="15" fill="rgb(245,21,50)" fg:x="558705577967" fg:w="183687314"/><text x="64.5817%" y="271.50"></text></g><g><title>&lt;infinite_rs::tag::structure::TagStruct as infinite_rs::common::extensions::Enumerable&gt;::read (212,493,350 samples, 0.02%)</title><rect x="64.3307%" y="341" width="0.0245%" height="15" fill="rgb(228,9,43)" fg:x="558696978652" fg:w="212493350"/><text x="64.5807%" y="351.50"></text></g><g><title>byteorder::io::ReadBytesExt::read_u16 (203,894,035 samples, 0.02%)</title><rect x="64.3317%" y="325" width="0.0235%" height="15" fill="rgb(208,100,47)" fg:x="558705577967" fg:w="203894035"/><text x="64.5817%" y="335.50"></text></g><g><title>infinite_rs::tag::loader::TagFile::read (683,871,885 samples, 0.08%)</title><rect x="64.2879%" y="373" width="0.0787%" height="15" fill="rgb(232,26,8)" fg:x="558325639994" fg:w="683871885"/><text x="64.5379%" y="383.50"></text></g><g><title>infinite_rs::common::extensions::BufReaderExt::read_enumerable (670,550,771 samples, 0.08%)</title><rect x="64.2895%" y="357" width="0.0772%" height="15" fill="rgb(216,166,38)" fg:x="558338961108" fg:w="670550771"/><text x="64.5395%" y="367.50"></text></g><g><title>malloc (126,176,357 samples, 0.01%)</title><rect x="64.3667%" y="373" width="0.0145%" height="15" fill="rgb(251,202,51)" fg:x="559009511879" fg:w="126176357"/><text x="64.6167%" y="383.50"></text></g><g><title>[unknown] (126,176,357 samples, 0.01%)</title><rect x="64.3667%" y="357" width="0.0145%" height="15" fill="rgb(254,216,34)" fg:x="559009511879" fg:w="126176357"/><text x="64.6167%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_exact (126,176,357 samples, 0.01%)</title><rect x="64.3667%" y="341" width="0.0145%" height="15" fill="rgb(251,32,27)" fg:x="559009511879" fg:w="126176357"/><text x="64.6167%" y="351.50"></text></g><g><title>infinite_rs::module::file::ModuleFileEntry::read_tag (1,018,967,406 samples, 0.12%)</title><rect x="64.2664%" y="389" width="0.1173%" height="15" fill="rgb(208,127,28)" fg:x="558138510177" fg:w="1018967406"/><text x="64.5164%" y="399.50"></text></g><g><title>[libc.so.6] (2,472,639,232 samples, 0.28%)</title><rect x="64.3849%" y="213" width="0.2847%" height="15" fill="rgb(224,137,22)" fg:x="559167805075" fg:w="2472639232"/><text x="64.6349%" y="223.50"></text></g><g><title>alloc::vec::from_elem (2,530,416,431 samples, 0.29%)</title><rect x="64.3845%" y="373" width="0.2914%" height="15" fill="rgb(254,70,32)" fg:x="559164438428" fg:w="2530416431"/><text x="64.6345%" y="383.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,530,416,431 samples, 0.29%)</title><rect x="64.3845%" y="357" width="0.2914%" height="15" fill="rgb(229,75,37)" fg:x="559164438428" fg:w="2530416431"/><text x="64.6345%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2,530,416,431 samples, 0.29%)</title><rect x="64.3845%" y="341" width="0.2914%" height="15" fill="rgb(252,64,23)" fg:x="559164438428" fg:w="2530416431"/><text x="64.6345%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (2,530,416,431 samples, 0.29%)</title><rect x="64.3845%" y="325" width="0.2914%" height="15" fill="rgb(232,162,48)" fg:x="559164438428" fg:w="2530416431"/><text x="64.6345%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,530,416,431 samples, 0.29%)</title><rect x="64.3845%" y="309" width="0.2914%" height="15" fill="rgb(246,160,12)" fg:x="559164438428" fg:w="2530416431"/><text x="64.6345%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2,527,049,784 samples, 0.29%)</title><rect x="64.3849%" y="293" width="0.2910%" height="15" fill="rgb(247,166,0)" fg:x="559167805075" fg:w="2527049784"/><text x="64.6349%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,527,049,784 samples, 0.29%)</title><rect x="64.3849%" y="277" width="0.2910%" height="15" fill="rgb(249,219,21)" fg:x="559167805075" fg:w="2527049784"/><text x="64.6349%" y="287.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,527,049,784 samples, 0.29%)</title><rect x="64.3849%" y="261" width="0.2910%" height="15" fill="rgb(205,209,3)" fg:x="559167805075" fg:w="2527049784"/><text x="64.6349%" y="271.50"></text></g><g><title>__rdl_alloc_zeroed (2,527,049,784 samples, 0.29%)</title><rect x="64.3849%" y="245" width="0.2910%" height="15" fill="rgb(243,44,1)" fg:x="559167805075" fg:w="2527049784"/><text x="64.6349%" y="255.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (2,527,049,784 samples, 0.29%)</title><rect x="64.3849%" y="229" width="0.2910%" height="15" fill="rgb(206,159,16)" fg:x="559167805075" fg:w="2527049784"/><text x="64.6349%" y="239.50"></text></g><g><title>infinite_rs::module::kraken::decompress (2,555,599,222 samples, 0.29%)</title><rect x="64.3837%" y="389" width="0.2943%" height="15" fill="rgb(244,77,30)" fg:x="559157477583" fg:w="2555599222"/><text x="64.6337%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::find (127,949,801 samples, 0.01%)</title><rect x="64.6833%" y="373" width="0.0147%" height="15" fill="rgb(218,69,12)" fg:x="561759301849" fg:w="127949801"/><text x="64.9333%" y="383.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks::_{{closure}} (114,026,658 samples, 0.01%)</title><rect x="64.6849%" y="357" width="0.0131%" height="15" fill="rgb(212,87,7)" fg:x="561773224992" fg:w="114026658"/><text x="64.9349%" y="367.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks (880,468,477 samples, 0.10%)</title><rect x="64.6828%" y="389" width="0.1014%" height="15" fill="rgb(245,114,25)" fg:x="561755308710" fg:w="880468477"/><text x="64.9328%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (677,972,573 samples, 0.08%)</title><rect x="64.7061%" y="373" width="0.0781%" height="15" fill="rgb(210,61,42)" fg:x="561957804614" fg:w="677972573"/><text x="64.9561%" y="383.50"></text></g><g><title>&lt;u32 as core::iter::traits::accum::Sum&gt;::sum (677,972,573 samples, 0.08%)</title><rect x="64.7061%" y="357" width="0.0781%" height="15" fill="rgb(211,52,33)" fg:x="561957804614" fg:w="677972573"/><text x="64.9561%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (677,972,573 samples, 0.08%)</title><rect x="64.7061%" y="341" width="0.0781%" height="15" fill="rgb(234,58,33)" fg:x="561957804614" fg:w="677972573"/><text x="64.9561%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (677,972,573 samples, 0.08%)</title><rect x="64.7061%" y="325" width="0.0781%" height="15" fill="rgb(220,115,36)" fg:x="561957804614" fg:w="677972573"/><text x="64.9561%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (677,972,573 samples, 0.08%)</title><rect x="64.7061%" y="309" width="0.0781%" height="15" fill="rgb(243,153,54)" fg:x="561957804614" fg:w="677972573"/><text x="64.9561%" y="319.50"></text></g><g><title>core::iter::adapters::filter::filter_fold::_{{closure}} (642,953,811 samples, 0.07%)</title><rect x="64.7102%" y="293" width="0.0740%" height="15" fill="rgb(251,47,18)" fg:x="561992823376" fg:w="642953811"/><text x="64.9602%" y="303.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldBlock&lt;T&gt;::load_blocks::_{{closure}} (391,712,976 samples, 0.05%)</title><rect x="64.7391%" y="277" width="0.0451%" height="15" fill="rgb(242,102,42)" fg:x="562244064211" fg:w="391712976"/><text x="64.9891%" y="287.50"></text></g><g><title>&lt;infinite_rs::tag::datablock::TagSectionType as core::cmp::PartialEq&gt;::eq (391,712,976 samples, 0.05%)</title><rect x="64.7391%" y="261" width="0.0451%" height="15" fill="rgb(234,31,38)" fg:x="562244064211" fg:w="391712976"/><text x="64.9891%" y="271.50"></text></g><g><title>infinite_rs::tag::types::common_types::FieldReference::read (321,805,648 samples, 0.04%)</title><rect x="64.7842%" y="389" width="0.0371%" height="15" fill="rgb(221,117,51)" fg:x="562635777187" fg:w="321805648"/><text x="65.0342%" y="399.50"></text></g><g><title>infinite_rs::common::extensions::BufReaderExt::read_fixed_string (123,220,944 samples, 0.01%)</title><rect x="64.8071%" y="373" width="0.0142%" height="15" fill="rgb(212,20,18)" fg:x="562834361891" fg:w="123220944"/><text x="65.0571%" y="383.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="277" width="0.1806%" height="15" fill="rgb(245,133,36)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="287.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="261" width="0.1806%" height="15" fill="rgb(212,6,19)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="271.50"></text></g><g><title>alloc::slice::hack::to_vec (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="245" width="0.1806%" height="15" fill="rgb(218,1,36)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="255.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="229" width="0.1806%" height="15" fill="rgb(246,84,54)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="213" width="0.1806%" height="15" fill="rgb(242,110,6)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="197" width="0.1806%" height="15" fill="rgb(214,47,5)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="207.50"></text></g><g><title>[libc.so.6] (1,568,359,843 samples, 0.18%)</title><rect x="64.8453%" y="181" width="0.1806%" height="15" fill="rgb(218,159,25)" fg:x="563166045977" fg:w="1568359843"/><text x="65.0953%" y="191.50"></text></g><g><title>[libc.so.6] (416,593,309 samples, 0.05%)</title><rect x="65.0269%" y="101" width="0.0480%" height="15" fill="rgb(215,211,28)" fg:x="564743288185" fg:w="416593309"/><text x="65.2769%" y="111.50"></text></g><g><title>ekur::bitmap::dds_header::construct_dds_header (2,003,170,704 samples, 0.23%)</title><rect x="64.8453%" y="293" width="0.2307%" height="15" fill="rgb(238,59,32)" fg:x="563166045977" fg:w="2003170704"/><text x="65.0953%" y="303.50"></text></g><g><title>ddsfile::Dds::new_dxgi (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="277" width="0.0490%" height="15" fill="rgb(226,82,3)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="287.50"></text></g><g><title>alloc::vec::from_elem (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="261" width="0.0490%" height="15" fill="rgb(240,164,32)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="271.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="245" width="0.0490%" height="15" fill="rgb(232,46,7)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="229" width="0.0490%" height="15" fill="rgb(229,129,53)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="213" width="0.0490%" height="15" fill="rgb(234,188,29)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="197" width="0.0490%" height="15" fill="rgb(246,141,4)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="181" width="0.0490%" height="15" fill="rgb(229,23,39)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="165" width="0.0490%" height="15" fill="rgb(206,12,3)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="175.50"></text></g><g><title>alloc::alloc::alloc_zeroed (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="149" width="0.0490%" height="15" fill="rgb(252,226,20)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="159.50"></text></g><g><title>__rdl_alloc_zeroed (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="133" width="0.0490%" height="15" fill="rgb(216,123,35)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="143.50"></text></g><g><title>std::sys::alloc::unix::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc_zeroed (425,928,496 samples, 0.05%)</title><rect x="65.0269%" y="117" width="0.0490%" height="15" fill="rgb(212,68,40)" fg:x="564743288185" fg:w="425928496"/><text x="65.2769%" y="127.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,712,796,042 samples, 0.20%)</title><rect x="75.8827%" y="165" width="0.1972%" height="15" fill="rgb(254,125,32)" fg:x="659023798769" fg:w="1712796042"/><text x="76.1327%" y="175.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,712,796,042 samples, 0.20%)</title><rect x="75.8827%" y="149" width="0.1972%" height="15" fill="rgb(253,97,22)" fg:x="659023798769" fg:w="1712796042"/><text x="76.1327%" y="159.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (8,044,421,114 samples, 0.93%)</title><rect x="76.0799%" y="165" width="0.9263%" height="15" fill="rgb(241,101,14)" fg:x="660736594811" fg:w="8044421114"/><text x="76.3299%" y="175.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (8,044,421,114 samples, 0.93%)</title><rect x="76.0799%" y="149" width="0.9263%" height="15" fill="rgb(238,103,29)" fg:x="660736594811" fg:w="8044421114"/><text x="76.3299%" y="159.50"></text></g><g><title>core::result::Result&lt;&amp;T,E&gt;::copied (8,044,421,114 samples, 0.93%)</title><rect x="76.0799%" y="133" width="0.9263%" height="15" fill="rgb(233,195,47)" fg:x="660736594811" fg:w="8044421114"/><text x="76.3299%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7,088,748,210 samples, 0.82%)</title><rect x="77.0062%" y="165" width="0.8162%" height="15" fill="rgb(246,218,30)" fg:x="668781015925" fg:w="7088748210"/><text x="77.2562%" y="175.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2,196,365,482 samples, 0.25%)</title><rect x="77.5695%" y="149" width="0.2529%" height="15" fill="rgb(219,145,47)" fg:x="673673398653" fg:w="2196365482"/><text x="77.8195%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::trailing_zeros (1,611,945,211 samples, 0.19%)</title><rect x="77.8303%" y="165" width="0.1856%" height="15" fill="rgb(243,12,26)" fg:x="675937579661" fg:w="1611945211"/><text x="78.0803%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1,047,838,884 samples, 0.12%)</title><rect x="78.0159%" y="165" width="0.1207%" height="15" fill="rgb(214,87,16)" fg:x="677549524872" fg:w="1047838884"/><text x="78.2659%" y="175.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1,047,838,884 samples, 0.12%)</title><rect x="78.0159%" y="149" width="0.1207%" height="15" fill="rgb(208,99,42)" fg:x="677549524872" fg:w="1047838884"/><text x="78.2659%" y="159.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (1,047,838,884 samples, 0.12%)</title><rect x="78.0159%" y="133" width="0.1207%" height="15" fill="rgb(253,99,2)" fg:x="677549524872" fg:w="1047838884"/><text x="78.2659%" y="143.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_shr (1,649,716,287 samples, 0.19%)</title><rect x="84.0513%" y="149" width="0.1900%" height="15" fill="rgb(220,168,23)" fg:x="729966203137" fg:w="1649716287"/><text x="84.3013%" y="159.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::set_len (98,539,858 samples, 0.01%)</title><rect x="84.6788%" y="101" width="0.0113%" height="15" fill="rgb(242,38,24)" fg:x="735415196847" fg:w="98539858"/><text x="84.9288%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (437,227,454 samples, 0.05%)</title><rect x="84.8921%" y="85" width="0.0503%" height="15" fill="rgb(225,182,9)" fg:x="737267964574" fg:w="437227454"/><text x="85.1421%" y="95.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (437,227,454 samples, 0.05%)</title><rect x="84.8921%" y="69" width="0.0503%" height="15" fill="rgb(243,178,37)" fg:x="737267964574" fg:w="437227454"/><text x="85.1421%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (437,227,454 samples, 0.05%)</title><rect x="84.8921%" y="53" width="0.0503%" height="15" fill="rgb(232,139,19)" fg:x="737267964574" fg:w="437227454"/><text x="85.1421%" y="63.50"></text></g><g><title>std::io::cursor::reserve_and_pad (2,994,765,028 samples, 0.34%)</title><rect x="84.6901%" y="101" width="0.3448%" height="15" fill="rgb(225,201,24)" fg:x="735513736705" fg:w="2994765028"/><text x="84.9401%" y="111.50"></text></g><g><title>core::num::&lt;impl usize&gt;::saturating_add (722,469,216 samples, 0.08%)</title><rect x="84.9517%" y="85" width="0.0832%" height="15" fill="rgb(221,47,46)" fg:x="737786032517" fg:w="722469216"/><text x="85.2017%" y="95.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_bits (59,997,304,276 samples, 6.91%)</title><rect x="78.1365%" y="165" width="6.9083%" height="15" fill="rgb(249,23,13)" fg:x="678597363756" fg:w="59997304276"/><text x="78.3865%" y="175.50">fdeflate:..</text></g><g><title>std::io::Write::write_all (6,978,748,608 samples, 0.80%)</title><rect x="84.2413%" y="149" width="0.8036%" height="15" fill="rgb(219,9,5)" fg:x="731615919424" fg:w="6978748608"/><text x="84.4913%" y="159.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (6,978,748,608 samples, 0.80%)</title><rect x="84.2413%" y="133" width="0.8036%" height="15" fill="rgb(254,171,16)" fg:x="731615919424" fg:w="6978748608"/><text x="84.4913%" y="143.50"></text></g><g><title>std::io::cursor::vec_write (6,978,748,608 samples, 0.80%)</title><rect x="84.2413%" y="117" width="0.8036%" height="15" fill="rgb(230,171,20)" fg:x="731615919424" fg:w="6978748608"/><text x="84.4913%" y="127.50"></text></g><g><title>core::num::&lt;impl u64&gt;::checked_shr (178,620,862 samples, 0.02%)</title><rect x="87.8347%" y="133" width="0.0206%" height="15" fill="rgb(210,71,41)" fg:x="762824101582" fg:w="178620862"/><text x="88.0847%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::capacity (3,826,915,591 samples, 0.44%)</title><rect x="87.9913%" y="69" width="0.4406%" height="15" fill="rgb(206,173,20)" fg:x="764183898421" fg:w="3826915591"/><text x="88.2413%" y="79.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::capacity (3,826,915,591 samples, 0.44%)</title><rect x="87.9913%" y="53" width="0.4406%" height="15" fill="rgb(233,88,34)" fg:x="764183898421" fg:w="3826915591"/><text x="88.2413%" y="63.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::capacity (3,826,915,591 samples, 0.44%)</title><rect x="87.9913%" y="37" width="0.4406%" height="15" fill="rgb(223,209,46)" fg:x="764183898421" fg:w="3826915591"/><text x="88.2413%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::len (125,233,427 samples, 0.01%)</title><rect x="88.4319%" y="69" width="0.0144%" height="15" fill="rgb(250,43,18)" fg:x="768010814012" fg:w="125233427"/><text x="88.6819%" y="79.50"></text></g><g><title>std::io::cursor::reserve_and_pad (4,337,398,143 samples, 0.50%)</title><rect x="87.9544%" y="85" width="0.4994%" height="15" fill="rgb(208,13,10)" fg:x="763863305551" fg:w="4337398143"/><text x="88.2044%" y="95.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_run (29,848,677,686 samples, 3.44%)</title><rect x="85.0448%" y="165" width="3.4369%" height="15" fill="rgb(212,200,36)" fg:x="738594668032" fg:w="29848677686"/><text x="85.2948%" y="175.50">fde..</text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_bits (14,878,148,026 samples, 1.71%)</title><rect x="86.7686%" y="149" width="1.7131%" height="15" fill="rgb(225,90,30)" fg:x="753565197692" fg:w="14878148026"/><text x="87.0186%" y="159.50"></text></g><g><title>std::io::Write::write_all (5,440,623,274 samples, 0.63%)</title><rect x="87.8553%" y="133" width="0.6265%" height="15" fill="rgb(236,182,39)" fg:x="763002722444" fg:w="5440623274"/><text x="88.1053%" y="143.50"></text></g><g><title>&lt;std::io::cursor::Cursor&lt;alloc::vec::Vec&lt;u8,A&gt;&gt; as std::io::Write&gt;::write (5,440,623,274 samples, 0.63%)</title><rect x="87.8553%" y="117" width="0.6265%" height="15" fill="rgb(212,144,35)" fg:x="763002722444" fg:w="5440623274"/><text x="88.1053%" y="127.50"></text></g><g><title>std::io::cursor::vec_write (5,440,623,274 samples, 0.63%)</title><rect x="87.8553%" y="101" width="0.6265%" height="15" fill="rgb(228,63,44)" fg:x="763002722444" fg:w="5440623274"/><text x="88.1053%" y="111.50"></text></g><g><title>std::io::cursor::vec_write_unchecked (242,642,024 samples, 0.03%)</title><rect x="88.4538%" y="85" width="0.0279%" height="15" fill="rgb(228,109,6)" fg:x="768200703694" fg:w="242642024"/><text x="88.7038%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::copy_from (242,642,024 samples, 0.03%)</title><rect x="88.4538%" y="69" width="0.0279%" height="15" fill="rgb(238,117,24)" fg:x="768200703694" fg:w="242642024"/><text x="88.7038%" y="79.50"></text></g><g><title>core::intrinsics::copy (242,642,024 samples, 0.03%)</title><rect x="88.4538%" y="53" width="0.0279%" height="15" fill="rgb(242,26,26)" fg:x="768200703694" fg:w="242642024"/><text x="88.7038%" y="63.50"></text></g><g><title>fdeflate::compress::Compressor&lt;W&gt;::write_data (203,039,166,308 samples, 23.38%)</title><rect x="65.1051%" y="181" width="23.3788%" height="15" fill="rgb(221,92,48)" fg:x="565422925103" fg:w="203039166308"/><text x="65.3551%" y="191.50">fdeflate::compress::Compressor&lt;W&gt;::wr..</text></g><g><title>image::image_reader::free_functions::write_buffer_impl (203,311,217,714 samples, 23.41%)</title><rect x="65.0769%" y="245" width="23.4101%" height="15" fill="rgb(209,209,32)" fg:x="565178030500" fg:w="203311217714"/><text x="65.3269%" y="255.50">image::image_reader::free_functions::..</text></g><g><title>&lt;image::codecs::png::PngEncoder&lt;W&gt; as image::image::ImageEncoder&gt;::write_image (203,311,217,714 samples, 23.41%)</title><rect x="65.0769%" y="229" width="23.4101%" height="15" fill="rgb(221,70,22)" fg:x="565178030500" fg:w="203311217714"/><text x="65.3269%" y="239.50">&lt;image::codecs::png::PngEncoder&lt;W&gt; as..</text></g><g><title>image::codecs::png::PngEncoder&lt;W&gt;::encode_inner (203,311,217,714 samples, 23.41%)</title><rect x="65.0769%" y="213" width="23.4101%" height="15" fill="rgb(248,145,5)" fg:x="565178030500" fg:w="203311217714"/><text x="65.3269%" y="223.50">image::codecs::png::PngEncoder&lt;W&gt;::en..</text></g><g><title>png::encoder::Writer&lt;W&gt;::write_image_data (203,254,255,920 samples, 23.40%)</title><rect x="65.0835%" y="197" width="23.4035%" height="15" fill="rgb(226,116,26)" fg:x="565234992294" fg:w="203254255920"/><text x="65.3335%" y="207.50">png::encoder::Writer&lt;W&gt;::write_image_..</text></g><g><title>image::buffer_::ImageBuffer&lt;P,Container&gt;::save_with_format (203,377,876,457 samples, 23.42%)</title><rect x="65.0759%" y="293" width="23.4178%" height="15" fill="rgb(244,5,17)" fg:x="565169216681" fg:w="203377876457"/><text x="65.3259%" y="303.50">image::buffer_::ImageBuffer&lt;P,Contain..</text></g><g><title>image::dynimage::save_buffer_with_format (203,377,876,457 samples, 23.42%)</title><rect x="65.0759%" y="277" width="23.4178%" height="15" fill="rgb(252,159,33)" fg:x="565169216681" fg:w="203377876457"/><text x="65.3259%" y="287.50">image::dynimage::save_buffer_with_for..</text></g><g><title>image::image_reader::free_functions::save_buffer_with_format_impl (203,377,876,457 samples, 23.42%)</title><rect x="65.0759%" y="261" width="23.4178%" height="15" fill="rgb(206,71,0)" fg:x="565169216681" fg:w="203377876457"/><text x="65.3259%" y="271.50">image::image_reader::free_functions::..</text></g><g><title>&lt;[u8: 16] as image_dds::bcn::decode::ReadBlock&gt;::read_block (228,402,997 samples, 0.03%)</title><rect x="88.5344%" y="197" width="0.0263%" height="15" fill="rgb(233,118,54)" fg:x="768900793717" fg:w="228402997"/><text x="88.7844%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (161,615,945 samples, 0.02%)</title><rect x="88.5421%" y="181" width="0.0186%" height="15" fill="rgb(234,83,48)" fg:x="768967580769" fg:w="161615945"/><text x="88.7921%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (161,615,945 samples, 0.02%)</title><rect x="88.5421%" y="165" width="0.0186%" height="15" fill="rgb(228,3,54)" fg:x="768967580769" fg:w="161615945"/><text x="88.7921%" y="175.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_sub (161,615,945 samples, 0.02%)</title><rect x="88.5421%" y="149" width="0.0186%" height="15" fill="rgb(226,155,13)" fg:x="768967580769" fg:w="161615945"/><text x="88.7921%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (102,907,794 samples, 0.01%)</title><rect x="88.5607%" y="197" width="0.0118%" height="15" fill="rgb(241,28,37)" fg:x="769129196714" fg:w="102907794"/><text x="88.8107%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::step_by::StepBy&lt;core::ops::range::Range&lt;u32&gt;&gt; as core::iter::adapters::step_by::StepByImpl&lt;core::ops::range::Range&lt;u32&gt;&gt;&gt;::spec_next (102,907,794 samples, 0.01%)</title><rect x="88.5607%" y="181" width="0.0118%" height="15" fill="rgb(233,93,10)" fg:x="769129196714" fg:w="102907794"/><text x="88.8107%" y="191.50"></text></g><g><title>&lt;image_dds::bcn::Bc5S as image_dds::bcn::decode::BcnDecode&lt;[u8: 4]&gt;&gt;::decompress_block (218,201,766 samples, 0.03%)</title><rect x="88.5736%" y="197" width="0.0251%" height="15" fill="rgb(225,113,19)" fg:x="769241135486" fg:w="218201766"/><text x="88.8236%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (146,409,964 samples, 0.02%)</title><rect x="89.1078%" y="165" width="0.0169%" height="15" fill="rgb(241,2,18)" fg:x="773880109317" fg:w="146409964"/><text x="89.3578%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (133,500,775 samples, 0.02%)</title><rect x="89.1092%" y="149" width="0.0154%" height="15" fill="rgb(228,207,21)" fg:x="773893018506" fg:w="133500775"/><text x="89.3592%" y="159.50"></text></g><g><title>bcdec_rs::Bitstream::read_bits (167,493,936 samples, 0.02%)</title><rect x="89.1261%" y="165" width="0.0193%" height="15" fill="rgb(213,211,35)" fg:x="774039191526" fg:w="167493936"/><text x="89.3761%" y="175.50"></text></g><g><title>bcdec_rs::interpolate (1,814,671,136 samples, 0.21%)</title><rect x="89.1454%" y="165" width="0.2089%" height="15" fill="rgb(209,83,10)" fg:x="774206685462" fg:w="1814671136"/><text x="89.3954%" y="175.50"></text></g><g><title>&lt;image_dds::bcn::Bc7 as image_dds::bcn::decode::BcnDecode&lt;[u8: 4]&gt;&gt;::decompress_block (10,061,930,888 samples, 1.16%)</title><rect x="88.5987%" y="197" width="1.1586%" height="15" fill="rgb(209,164,1)" fg:x="769459337252" fg:w="10061930888"/><text x="88.8487%" y="207.50"></text></g><g><title>bcdec_rs::bc7 (9,245,814,153 samples, 1.06%)</title><rect x="88.6927%" y="181" width="1.0646%" height="15" fill="rgb(213,184,43)" fg:x="770275453987" fg:w="9245814153"/><text x="88.9427%" y="191.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3,499,911,542 samples, 0.40%)</title><rect x="89.3543%" y="165" width="0.4030%" height="15" fill="rgb(231,61,34)" fg:x="776021356598" fg:w="3499911542"/><text x="89.6043%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3,499,911,542 samples, 0.40%)</title><rect x="89.3543%" y="149" width="0.4030%" height="15" fill="rgb(235,75,3)" fg:x="776021356598" fg:w="3499911542"/><text x="89.6043%" y="159.50"></text></g><g><title>alloc::vec::from_elem (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="197" width="0.2647%" height="15" fill="rgb(220,106,47)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="207.50"></text></g><g><title>&lt;u8 as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="181" width="0.2647%" height="15" fill="rgb(210,196,33)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_zeroed_in (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="165" width="0.2647%" height="15" fill="rgb(229,154,42)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::with_capacity_zeroed_in (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="149" width="0.2647%" height="15" fill="rgb(228,114,26)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVecInner&lt;A&gt;::try_allocate_in (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="133" width="0.2647%" height="15" fill="rgb(208,144,1)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate_zeroed (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="117" width="0.2647%" height="15" fill="rgb(239,112,37)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="101" width="0.2647%" height="15" fill="rgb(210,96,50)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="111.50"></text></g><g><title>alloc::alloc::alloc_zeroed (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="85" width="0.2647%" height="15" fill="rgb(222,178,2)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="95.50"></text></g><g><title>[libc.so.6] (2,298,454,655 samples, 0.26%)</title><rect x="89.7573%" y="69" width="0.2647%" height="15" fill="rgb(226,74,18)" fg:x="779521268140" fg:w="2298454655"/><text x="90.0073%" y="79.50"></text></g><g><title>core::cmp::Ord::min (108,454,443 samples, 0.01%)</title><rect x="90.1406%" y="181" width="0.0125%" height="15" fill="rgb(225,67,54)" fg:x="782850262074" fg:w="108454443"/><text x="90.3906%" y="191.50"></text></g><g><title>core::cmp::min_by (108,454,443 samples, 0.01%)</title><rect x="90.1406%" y="165" width="0.0125%" height="15" fill="rgb(251,92,32)" fg:x="782850262074" fg:w="108454443"/><text x="90.3906%" y="175.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (12,502,303,775 samples, 1.44%)</title><rect x="90.1531%" y="181" width="1.4396%" height="15" fill="rgb(228,149,22)" fg:x="782958716517" fg:w="12502303775"/><text x="90.4031%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12,502,303,775 samples, 1.44%)</title><rect x="90.1531%" y="165" width="1.4396%" height="15" fill="rgb(243,54,13)" fg:x="782958716517" fg:w="12502303775"/><text x="90.4031%" y="175.50"></text></g><g><title>[libc.so.6] (11,479,980,345 samples, 1.32%)</title><rect x="90.2708%" y="149" width="1.3219%" height="15" fill="rgb(243,180,28)" fg:x="783981039947" fg:w="11479980345"/><text x="90.5208%" y="159.50"></text></g><g><title>&lt;u8 as image_dds::decode::Decode&gt;::decode (27,575,534,464 samples, 3.18%)</title><rect x="88.4942%" y="229" width="3.1752%" height="15" fill="rgb(208,167,24)" fg:x="768551661916" fg:w="27575534464"/><text x="88.7442%" y="239.50">&lt;u8..</text></g><g><title>image_dds::bcn::decode::decode_bcn (27,575,534,464 samples, 3.18%)</title><rect x="88.4942%" y="213" width="3.1752%" height="15" fill="rgb(245,73,45)" fg:x="768551661916" fg:w="27575534464"/><text x="88.7442%" y="223.50">ima..</text></g><g><title>image_dds::bcn::decode::put_rgba_block (14,307,473,585 samples, 1.65%)</title><rect x="90.0220%" y="197" width="1.6474%" height="15" fill="rgb(237,203,48)" fg:x="781819722795" fg:w="14307473585"/><text x="90.2720%" y="207.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (666,176,088 samples, 0.08%)</title><rect x="91.5927%" y="181" width="0.0767%" height="15" fill="rgb(211,197,16)" fg:x="795461020292" fg:w="666176088"/><text x="91.8427%" y="191.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (666,176,088 samples, 0.08%)</title><rect x="91.5927%" y="165" width="0.0767%" height="15" fill="rgb(243,99,51)" fg:x="795461020292" fg:w="666176088"/><text x="91.8427%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (18,734,511,362 samples, 2.16%)</title><rect x="91.6694%" y="229" width="2.1572%" height="15" fill="rgb(215,123,29)" fg:x="796127196380" fg:w="18734511362"/><text x="91.9194%" y="239.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (18,734,511,362 samples, 2.16%)</title><rect x="91.6694%" y="213" width="2.1572%" height="15" fill="rgb(239,186,37)" fg:x="796127196380" fg:w="18734511362"/><text x="91.9194%" y="223.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (18,734,511,362 samples, 2.16%)</title><rect x="91.6694%" y="197" width="2.1572%" height="15" fill="rgb(252,136,39)" fg:x="796127196380" fg:w="18734511362"/><text x="91.9194%" y="207.50">a..</text></g><g><title>core::intrinsics::copy_nonoverlapping (18,729,889,288 samples, 2.16%)</title><rect x="91.6699%" y="181" width="2.1566%" height="15" fill="rgb(223,213,32)" fg:x="796131818454" fg:w="18729889288"/><text x="91.9199%" y="191.50">c..</text></g><g><title>[libc.so.6] (18,729,889,288 samples, 2.16%)</title><rect x="91.6699%" y="165" width="2.1566%" height="15" fill="rgb(233,115,5)" fg:x="796131818454" fg:w="18729889288"/><text x="91.9199%" y="175.50">[..</text></g><g><title>[unknown] (714,391,893 samples, 0.08%)</title><rect x="93.7443%" y="149" width="0.0823%" height="15" fill="rgb(207,226,44)" fg:x="814147315849" fg:w="714391893"/><text x="93.9943%" y="159.50"></text></g><g><title>[unknown] (241,828,124 samples, 0.03%)</title><rect x="93.7987%" y="133" width="0.0278%" height="15" fill="rgb(208,126,0)" fg:x="814619879618" fg:w="241828124"/><text x="94.0487%" y="143.50"></text></g><g><title>ekur::bitmap::extract::extract_all_bitmaps (251,843,391,887 samples, 29.00%)</title><rect x="64.8396%" y="325" width="28.9983%" height="15" fill="rgb(244,66,21)" fg:x="563116361759" fg:w="251843391887"/><text x="65.0896%" y="335.50">ekur::bitmap::extract::extract_all_bitmaps</text></g><g><title>ekur::bitmap::extract::save_bitmap (251,815,942,890 samples, 29.00%)</title><rect x="64.8427%" y="309" width="28.9951%" height="15" fill="rgb(222,97,12)" fg:x="563143810756" fg:w="251815942890"/><text x="65.0927%" y="319.50">ekur::bitmap::extract::save_bitmap</text></g><g><title>image_dds::dds::image_from_dds (46,412,660,508 samples, 5.34%)</title><rect x="88.4937%" y="293" width="5.3441%" height="15" fill="rgb(219,213,19)" fg:x="768547093138" fg:w="46412660508"/><text x="88.7437%" y="303.50">image_d..</text></g><g><title>image_dds::dds::&lt;impl image_dds::surface::SurfaceRgba8&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt;::decode_layers_mipmaps_dds (46,412,660,508 samples, 5.34%)</title><rect x="88.4937%" y="277" width="5.3441%" height="15" fill="rgb(252,169,30)" fg:x="768547093138" fg:w="46412660508"/><text x="88.7437%" y="287.50">image_d..</text></g><g><title>image_dds::decode::&lt;impl image_dds::surface::Surface&lt;T&gt;&gt;::decode_layers_mipmaps_rgba8 (46,408,091,730 samples, 5.34%)</title><rect x="88.4942%" y="261" width="5.3436%" height="15" fill="rgb(206,32,51)" fg:x="768551661916" fg:w="46408091730"/><text x="88.7442%" y="271.50">image_d..</text></g><g><title>image_dds::decode::decode_surface (46,408,091,730 samples, 5.34%)</title><rect x="88.4942%" y="245" width="5.3436%" height="15" fill="rgb(250,172,42)" fg:x="768551661916" fg:w="46408091730"/><text x="88.7442%" y="255.50">image_d..</text></g><g><title>ekur::loader::module::load_modules (138,035,444 samples, 0.02%)</title><rect x="93.8405%" y="325" width="0.0159%" height="15" fill="rgb(209,34,43)" fg:x="814982975143" fg:w="138035444"/><text x="94.0905%" y="335.50"></text></g><g><title>infinite_rs::module::loader::ModuleFile::from_path (138,035,444 samples, 0.02%)</title><rect x="93.8405%" y="309" width="0.0159%" height="15" fill="rgb(223,11,35)" fg:x="814982975143" fg:w="138035444"/><text x="94.0905%" y="319.50"></text></g><g><title>infinite_rs::module::loader::ModuleFile::read (138,035,444 samples, 0.02%)</title><rect x="93.8405%" y="293" width="0.0159%" height="15" fill="rgb(251,219,26)" fg:x="814982975143" fg:w="138035444"/><text x="94.0905%" y="303.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::any (112,315,524 samples, 0.01%)</title><rect x="93.8879%" y="293" width="0.0129%" height="15" fill="rgb(231,119,3)" fg:x="815394572333" fg:w="112315524"/><text x="94.1379%" y="303.50"></text></g><g><title>ekur::model::utils::data_exists (128,259,691 samples, 0.01%)</title><rect x="93.8879%" y="309" width="0.0148%" height="15" fill="rgb(216,97,11)" fg:x="815394572333" fg:w="128259691"/><text x="94.1379%" y="319.50"></text></g><g><title>ekur::model::utils::get_buffers (151,252,241 samples, 0.02%)</title><rect x="93.9027%" y="309" width="0.0174%" height="15" fill="rgb(223,59,9)" fg:x="815522832024" fg:w="151252241"/><text x="94.1527%" y="319.50"></text></g><g><title>ekur::model::serialize::process_models (516,756,440 samples, 0.06%)</title><rect x="93.8647%" y="325" width="0.0595%" height="15" fill="rgb(233,93,31)" fg:x="815193219776" fg:w="516756440"/><text x="94.1147%" y="335.50"></text></g><g><title>main (252,833,494,818 samples, 29.11%)</title><rect x="64.8213%" y="389" width="29.1123%" height="15" fill="rgb(239,81,33)" fg:x="562957582835" fg:w="252833494818"/><text x="65.0713%" y="399.50">main</text></g><g><title>std::sys::backtrace::__rust_begin_short_backtrace (252,833,494,818 samples, 29.11%)</title><rect x="64.8213%" y="373" width="29.1123%" height="15" fill="rgb(213,120,34)" fg:x="562957582835" fg:w="252833494818"/><text x="65.0713%" y="383.50">std::sys::backtrace::__rust_begin_short_backtra..</text></g><g><title>core::ops::function::FnOnce::call_once (252,833,494,818 samples, 29.11%)</title><rect x="64.8213%" y="357" width="29.1123%" height="15" fill="rgb(243,49,53)" fg:x="562957582835" fg:w="252833494818"/><text x="65.0713%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>ekur::main (252,833,494,818 samples, 29.11%)</title><rect x="64.8213%" y="341" width="29.1123%" height="15" fill="rgb(247,216,33)" fg:x="562957582835" fg:w="252833494818"/><text x="65.0713%" y="351.50">ekur::main</text></g><g><title>crc32fast::specialized::pclmulqdq::get (94,020,011 samples, 0.01%)</title><rect x="93.9459%" y="325" width="0.0108%" height="15" fill="rgb(226,26,14)" fg:x="815897966133" fg:w="94020011"/><text x="94.1959%" y="335.50"></text></g><g><title>core::core_arch::x86::pclmulqdq::_mm_clmulepi64_si128 (1,662,378,224 samples, 0.19%)</title><rect x="93.9567%" y="309" width="0.1914%" height="15" fill="rgb(215,49,53)" fg:x="815991986144" fg:w="1662378224"/><text x="94.2067%" y="319.50"></text></g><g><title>png::encoder::write_chunk (3,129,266,578 samples, 0.36%)</title><rect x="93.9379%" y="389" width="0.3603%" height="15" fill="rgb(245,162,40)" fg:x="815828620307" fg:w="3129266578"/><text x="94.1879%" y="399.50"></text></g><g><title>crc32fast::Hasher::update (3,129,266,578 samples, 0.36%)</title><rect x="93.9379%" y="373" width="0.3603%" height="15" fill="rgb(229,68,17)" fg:x="815828620307" fg:w="3129266578"/><text x="94.1879%" y="383.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (3,129,266,578 samples, 0.36%)</title><rect x="93.9379%" y="357" width="0.3603%" height="15" fill="rgb(213,182,10)" fg:x="815828620307" fg:w="3129266578"/><text x="94.1879%" y="367.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (3,129,266,578 samples, 0.36%)</title><rect x="93.9379%" y="341" width="0.3603%" height="15" fill="rgb(245,125,30)" fg:x="815828620307" fg:w="3129266578"/><text x="94.1879%" y="351.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::reduce128 (2,965,900,741 samples, 0.34%)</title><rect x="93.9567%" y="325" width="0.3415%" height="15" fill="rgb(232,202,2)" fg:x="815991986144" fg:w="2965900741"/><text x="94.2067%" y="335.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_xor_si128 (1,303,522,517 samples, 0.15%)</title><rect x="94.1481%" y="309" width="0.1501%" height="15" fill="rgb(237,140,51)" fg:x="817654364368" fg:w="1303522517"/><text x="94.3981%" y="319.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (6,126,668,264 samples, 0.71%)</title><rect x="94.8882%" y="357" width="0.7054%" height="15" fill="rgb(236,157,25)" fg:x="824081562977" fg:w="6126668264"/><text x="95.1382%" y="367.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6,126,668,264 samples, 0.71%)</title><rect x="94.8882%" y="341" width="0.7054%" height="15" fill="rgb(219,209,0)" fg:x="824081562977" fg:w="6126668264"/><text x="95.1382%" y="351.50"></text></g><g><title>png::filter::filter (19,110,544,471 samples, 2.20%)</title><rect x="94.2982%" y="389" width="2.2005%" height="15" fill="rgb(240,116,54)" fg:x="818957886885" fg:w="19110544471"/><text x="94.5482%" y="399.50">p..</text></g><g><title>png::filter::sum_buffer (18,644,786,211 samples, 2.15%)</title><rect x="94.3518%" y="373" width="2.1468%" height="15" fill="rgb(216,10,36)" fg:x="819423645145" fg:w="18644786211"/><text x="94.6018%" y="383.50">p..</text></g><g><title>core::num::&lt;impl u64&gt;::saturating_add (7,855,619,604 samples, 0.90%)</title><rect x="95.5941%" y="357" width="0.9045%" height="15" fill="rgb(222,72,44)" fg:x="830212811752" fg:w="7855619604"/><text x="95.8441%" y="367.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (609,554,203 samples, 0.07%)</title><rect x="97.4463%" y="293" width="0.0702%" height="15" fill="rgb(232,159,9)" fg:x="846298226723" fg:w="609554203"/><text x="97.6963%" y="303.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (6,589,112,160 samples, 0.76%)</title><rect x="97.4463%" y="309" width="0.7587%" height="15" fill="rgb(210,39,32)" fg:x="846298226723" fg:w="6589112160"/><text x="97.6963%" y="319.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5,979,557,957 samples, 0.69%)</title><rect x="97.5165%" y="293" width="0.6885%" height="15" fill="rgb(216,194,45)" fg:x="846907780926" fg:w="5979557957"/><text x="97.7665%" y="303.50"></text></g><g><title>&lt;core::slice::iter::ChunksExact&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (102,564,897 samples, 0.01%)</title><rect x="98.2066%" y="261" width="0.0118%" height="15" fill="rgb(218,18,35)" fg:x="852901489821" fg:w="102564897"/><text x="98.4566%" y="271.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,705,762,762 samples, 0.20%)</title><rect x="98.2066%" y="277" width="0.1964%" height="15" fill="rgb(207,83,51)" fg:x="852901489821" fg:w="1705762762"/><text x="98.4566%" y="287.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,603,197,865 samples, 0.18%)</title><rect x="98.2184%" y="261" width="0.1846%" height="15" fill="rgb(225,63,43)" fg:x="853004054718" fg:w="1603197865"/><text x="98.4684%" y="271.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::iterator::Iterator&gt;::next (1,978,631,143 samples, 0.23%)</title><rect x="98.4030%" y="245" width="0.2278%" height="15" fill="rgb(207,57,36)" fg:x="854607252583" fg:w="1978631143"/><text x="98.6530%" y="255.50"></text></g><g><title>&lt;core::slice::iter::ChunksExactMut&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,978,631,143 samples, 0.23%)</title><rect x="98.4030%" y="229" width="0.2278%" height="15" fill="rgb(216,99,33)" fg:x="854607252583" fg:w="1978631143"/><text x="98.6530%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,038,224,586 samples, 0.23%)</title><rect x="98.4030%" y="277" width="0.2347%" height="15" fill="rgb(225,42,16)" fg:x="854607252583" fg:w="2038224586"/><text x="98.6530%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (2,038,224,586 samples, 0.23%)</title><rect x="98.4030%" y="261" width="0.2347%" height="15" fill="rgb(220,201,45)" fg:x="854607252583" fg:w="2038224586"/><text x="98.6530%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,970,509,162 samples, 0.46%)</title><rect x="98.2050%" y="309" width="0.4572%" height="15" fill="rgb(225,33,4)" fg:x="852887338883" fg:w="3970509162"/><text x="98.4550%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (3,970,509,162 samples, 0.46%)</title><rect x="98.2050%" y="293" width="0.4572%" height="15" fill="rgb(224,33,50)" fg:x="852887338883" fg:w="3970509162"/><text x="98.4550%" y="303.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (212,370,876 samples, 0.02%)</title><rect x="98.6377%" y="277" width="0.0245%" height="15" fill="rgb(246,198,51)" fg:x="856645477169" fg:w="212370876"/><text x="98.8877%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,791,711,969 samples, 1.24%)</title><rect x="97.4401%" y="373" width="1.2426%" height="15" fill="rgb(205,22,4)" fg:x="846244092159" fg:w="10791711969"/><text x="97.6901%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10,791,711,969 samples, 1.24%)</title><rect x="97.4401%" y="357" width="1.2426%" height="15" fill="rgb(206,3,8)" fg:x="846244092159" fg:w="10791711969"/><text x="97.6901%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (10,737,577,405 samples, 1.24%)</title><rect x="97.4463%" y="341" width="1.2364%" height="15" fill="rgb(251,23,15)" fg:x="846298226723" fg:w="10737577405"/><text x="97.6963%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10,737,577,405 samples, 1.24%)</title><rect x="97.4463%" y="325" width="1.2364%" height="15" fill="rgb(252,88,28)" fg:x="846298226723" fg:w="10737577405"/><text x="97.6963%" y="335.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (177,956,083 samples, 0.02%)</title><rect x="98.6622%" y="309" width="0.0205%" height="15" fill="rgb(212,127,14)" fg:x="856857848045" fg:w="177956083"/><text x="98.9122%" y="319.50"></text></g><g><title>core::num::&lt;impl u8&gt;::wrapping_sub (5,010,567,211 samples, 0.58%)</title><rect x="98.6884%" y="373" width="0.5769%" height="15" fill="rgb(247,145,37)" fg:x="857085810369" fg:w="5010567211"/><text x="98.9384%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (98,458,375 samples, 0.01%)</title><rect x="99.2700%" y="373" width="0.0113%" height="15" fill="rgb(209,117,53)" fg:x="862137134841" fg:w="98458375"/><text x="99.5200%" y="383.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (98,458,375 samples, 0.01%)</title><rect x="99.2700%" y="357" width="0.0113%" height="15" fill="rgb(212,90,42)" fg:x="862137134841" fg:w="98458375"/><text x="99.5200%" y="367.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (98,458,375 samples, 0.01%)</title><rect x="99.2700%" y="341" width="0.0113%" height="15" fill="rgb(218,164,37)" fg:x="862137134841" fg:w="98458375"/><text x="99.5200%" y="351.50"></text></g><g><title>png::filter::filter_internal (28,317,324,130 samples, 3.26%)</title><rect x="96.4987%" y="389" width="3.2606%" height="15" fill="rgb(246,65,34)" fg:x="838068431356" fg:w="28317324130"/><text x="96.7487%" y="399.50">png..</text></g><g><title>png::filter::filter_paeth_fpnge (4,074,195,561 samples, 0.47%)</title><rect x="99.2901%" y="373" width="0.4691%" height="15" fill="rgb(231,100,33)" fg:x="862311559925" fg:w="4074195561"/><text x="99.5401%" y="383.50"></text></g><g><title>core::f32::&lt;impl f32&gt;::to_bits (95,139,702 samples, 0.01%)</title><rect x="99.7787%" y="373" width="0.0110%" height="15" fill="rgb(228,126,14)" fg:x="866554531457" fg:w="95139702"/><text x="100.0287%" y="383.50"></text></g><g><title>ryu::f2s_intrinsics::mul_pow5_div_pow2 (256,871,304 samples, 0.03%)</title><rect x="99.9317%" y="357" width="0.0296%" height="15" fill="rgb(215,173,21)" fg:x="867883410264" fg:w="256871304"/><text x="100.1817%" y="367.50"></text></g><g><title>ryu::f2s_intrinsics::mul_shift_32 (213,806,113 samples, 0.02%)</title><rect x="99.9366%" y="341" width="0.0246%" height="15" fill="rgb(210,6,40)" fg:x="867926475455" fg:w="213806113"/><text x="100.1866%" y="351.50"></text></g><g><title>ryu::f2s::f2d (1,426,669,949 samples, 0.16%)</title><rect x="99.7980%" y="373" width="0.1643%" height="15" fill="rgb(212,48,18)" fg:x="866722317551" fg:w="1426669949"/><text x="100.0480%" y="383.50"></text></g><g><title>ryu::pretty::mantissa::write_mantissa (121,004,303 samples, 0.01%)</title><rect x="99.9627%" y="373" width="0.0139%" height="15" fill="rgb(230,214,11)" fg:x="868152397757" fg:w="121004303"/><text x="100.2127%" y="383.50"></text></g><g><title>ryu::pretty::format32 (1,890,774,824 samples, 0.22%)</title><rect x="99.7592%" y="389" width="0.2177%" height="15" fill="rgb(254,105,39)" fg:x="866385755486" fg:w="1890774824"/><text x="100.0092%" y="399.50"></text></g><g><title>all (868,476,659,942 samples, 100%)</title><rect x="0.0000%" y="421" width="100.0000%" height="15" fill="rgb(245,158,5)" fg:x="0" fg:w="868476659942"/><text x="0.2500%" y="431.50"></text></g><g><title>ekur (868,476,659,942 samples, 100.00%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(249,208,11)" fg:x="0" fg:w="868476659942"/><text x="0.2500%" y="415.50">ekur</text></g></svg></svg>